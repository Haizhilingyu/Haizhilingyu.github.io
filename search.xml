<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何移除你项目中百分之99的JS代码</title>
    <url>/2022/09/10/%E5%AD%A6%E4%B9%A0%E7%B1%BB/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/Javascript/%E5%A6%82%E4%BD%95%E7%A7%BB%E9%99%A4%E4%BD%A0%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%99%BE%E5%88%86%E4%B9%8B99%E7%9A%84JS%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="如何移除你项目中-99-的-JS-代码"><a href="#如何移除你项目中-99-的-JS-代码" class="headerlink" title="如何移除你项目中 99% 的 JS 代码"></a>如何移除你项目中 99% 的 JS 代码</h1><p>在前不久的WWC22中，<code>builder.io</code>的CTO <strong>「miško hevery」</strong>（同时也是<code>Angular</code>&#x2F;<code>AngularJS</code>的发明者）发表了一段充满想象力的演讲。-</p>
<span id="more"></span>
<p><img src="https://image.cubox.pro/article/2022062223543714822/74256.jpg"></p>
<p>miško hevery</p>
<p>在演讲中，他介绍了一款全栈SSR框架 —— <code>Qwik</code>，这款框架号称<strong>「能帮你移除项目中99%的JS代码」</strong>。</p>
<p><img src="https://image.cubox.pro/article/2022062223543756157/48170.jpg"></p>
<p>他是如何办到的，本文我们来介绍下<code>Qwik</code>。</p>
<h2 id="性能差？码农不背锅"><a href="#性能差？码农不背锅" class="headerlink" title="性能差？码农不背锅"></a>性能差？码农不背锅</h2><p>先来聊聊<code>Qwik</code>诞生的背景。</p>
<p>对于很多<code>2C web</code>应用（比如电商），首屏性能指标关乎用户留存，用户留存关乎赚多少钱。</p>
<p>所以，应用打开速度会影响赚钱。</p>
<p>然而，对于前端开发者，首屏性能指标并不容易优化。究其原因，并不是开发者不够努力。</p>
<p>让我们来看两个性能指标。</p>
<h3 id="如何优化FCP"><a href="#如何优化FCP" class="headerlink" title="如何优化FCP"></a>如何优化FCP</h3><p><code>FCP</code>（First Contentful Paint，首次内容绘制）测量<strong>「页面从开始加载到页面内容的任何部分在屏幕上完成渲染的时间」</strong>。</p>
<p>当前<code>web</code>应用普遍采用<strong>「前端框架」</strong>开发，这意味着会引入大量<code>JS</code>代码（框架本身代码、第三方依赖包的代码……）</p>
<p>从<code>HTML</code>开始解析到最终页面渲染，中间还要经历：</p>
<ol>
<li><p>下载框架<code>JS</code>代码</p>
</li>
<li><p>执行框架<code>JS</code>代码</p>
</li>
<li><p>由框架完成页面渲染</p>
</li>
</ol>
<p>这就导致<code>FCP</code>指标的下降。</p>
<p>为了优化<code>FCP</code>，框架作者提出了<code>SSR</code>（Server Side Render，服务端渲染），在服务端生成首屏所需<code>HTML</code>，这就为<code>FCP</code>省去了上述三个步骤所需时间。</p>
<p>但是，<code>TTI</code>指标仍然需要优化。</p>
<h3 id="如何优化TTI"><a href="#如何优化TTI" class="headerlink" title="如何优化TTI"></a>如何优化TTI</h3><p><code>TTI</code>（Time to Interactive，用户可交互时间）测量<strong>「页面变得完全可交互所需时间」</strong>。</p>
<p>主要衡量的是从下述1到3所需时间：</p>
<ol>
<li><p>首先衡量<code>FCP</code>时间</p>
</li>
<li><p>为页面中的元素绑定事件</p>
</li>
<li><p>对元素产生交互后，事件响应时间在50ms内</p>
</li>
</ol>
<p>使用<code>SSR</code>后，虽然<code>FCP</code>降低，但是框架<code>hydrate</code>（注水，即框架使页面能够响应交互）所需时间对<code>TTI</code>会有影响。</p>
<p>可见，性能瓶颈的源头在<code>JS</code>代码。</p>
<p><code>React18</code>的<code>Selective Hydration</code>通过<strong>「让用户交互的部分优先hydrate」</strong>来优化<code>TTI</code>指标。</p>
<p>但是，<code>Qwik</code>更极端，他的目标是 —— 干掉所有不必要的<code>JS</code>耗时，这里的耗时包括两部分：</p>
<ul>
<li><p><code>JS</code>作为静态资源加载的耗时</p>
</li>
<li><p><code>JS</code>运行时的耗时</p>
</li>
</ul>
<h2 id="超超超细粒度hydrate"><a href="#超超超细粒度hydrate" class="headerlink" title="超超超细粒度hydrate"></a>超超超细粒度hydrate</h2><p>如果说传统<code>SSR</code>的粒度是<strong>「整个页面」</strong>。</p>
<p>那么<code>React18</code>的<code>Selective Hydration</code>的粒度是<strong>「产生交互的组件」</strong>。</p>
<p>那么<code>Qwik</code>的粒度是<strong>「组件中的某个方法」</strong>。</p>
<p>举个例子，下面是<code>HelloWorld</code>组件（可以发现，<code>Qwik</code>采用类似<code>React</code>的语法）：</p>
<p><img src="https://image.cubox.pro/article/2022062223543725346/17211.jpg"></p>
<p>对应页面渲染效果：</p>
<p><img src="https://image.cubox.pro/article/2022062223543762376/75612.jpg"></p>
<p>打开浏览器<code>Network</code>面板，这个页面会有多少<code>JS</code>请求呢？</p>
<p>由于这是个静态的组件，没有逻辑，所以答案是：没有<code>JS</code>请求。</p>
<p>再来看看经典的计数器<code>Counter</code>组件，相比<code>HelloWorld</code>，增加了<strong>「点击按钮状态变化的逻辑」</strong>，代码如下：</p>
<p><img src="https://image.cubox.pro/article/2022062223543710885/57794.jpg"></p>
<p>对应页面渲染效果：</p>
<p><img src="https://image.cubox.pro/article/2022062223543744922/75705.jpg"></p>
<p>打开浏览器<code>Network</code>面板，这个页面会有多少<code>JS</code>请求呢？</p>
<p>答案还是：没有<code>JS</code>请求。</p>
<p>注意这两个组件的代码中，定义组件使用的是<code>component$</code>，有个<code>$</code>符号。</p>
<p>在<code>Counter</code>中，<code>onClick$</code>回调也有个<code>$</code>符号。</p>
<p>在<code>Qwik</code>中，后缀带<code>$</code>的函数都是<strong>「懒加载」</strong>的。</p>
<p><code>hydrate</code>的粒度有多细，就取决于<code>$</code>定义的多细。</p>
<p>比如在<code>Counter</code>中，<code>onClick$</code>带<code>$</code>后缀，那么点击回调是懒加载的，所以首屏渲染不会包含<strong>「点击后的逻辑」</strong>对应的<code>JS</code>代码。</p>
<p>在点击按钮后，会发起2个<code>JS</code>请求，第一个请求返回的是<strong>「点击后的逻辑」</strong>：</p>
<p><img src="https://image.cubox.pro/article/2022062223543783855/51820.jpg"></p>
<p>第2个<code>JS</code>请求返回的是<strong>「组件重新render的逻辑」</strong>：</p>
<p><img src="https://image.cubox.pro/article/2022062223543754047/53282.jpg"></p>
<p>这两段代码执行后，<code>Counter</code>变为1。</p>
<p><img src="https://image.cubox.pro/article/2022062223543718108/51175.jpg"></p>
<p>审查元素会发现，点击前，<code>button</code> <code>on:click</code>属性中保存了<strong>「逻辑所在的地址」</strong>：</p>
<p><img src="https://image.cubox.pro/article/2022062223543745118/58832.jpg"></p>
<p>点击后，会从对应地址下载<code>JS</code>代码，执行对应逻辑。</p>
<h2 id="从优秀到极致"><a href="#从优秀到极致" class="headerlink" title="从优秀到极致"></a>从优秀到极致</h2><p>是不是觉得已经优化到极致了？还没。</p>
<p>对于一些在页面中长期存在的、需要<code>JS</code>驱动的模块（比如轮播图），在模块展现前，<strong>「模块对应JS」</strong>不是必要的。</p>
<p>比如下面这个钟的示例，页面中有个长长的列表，超过一屏高度，在列表底部有个钟。</p>
<p>下面是列表滚到底的样子：</p>
<p><img src="https://image.cubox.pro/article/2022062223543769448/20779.jpg"></p>
<p>在<code>Clock</code>组件的<code>useClientEffect$</code>中定义<strong>「时钟指针摆动的逻辑」</strong>：</p>
<p><img src="https://image.cubox.pro/article/2022062223543718212/62452.jpg"></p>
<p><code>Qwik</code>中也存在类似<code>React</code>的<code>useEffect</code>，但在<code>Qwik</code>中这个<code>Hook</code>可以在服务端&#x2F;客户端执行。</p>
<p>为了区分，<code>useClientEffect</code>是<strong>「只在客户端执行的useEffect」</strong>。</p>
<p>加了<code>$</code>后缀，代表他是<strong>「懒加载的」</strong>。</p>
<p>具体效果是：当页面滚动到钟露出之前，<code>useClientEffect$</code>对应<code>JS</code>代码都不会请求。</p>
<p>当钟露出后，会发起两个<code>JS</code>资源请求：</p>
<ul>
<li><p><code>useClientEffect</code>的逻辑</p>
</li>
<li><p><code>Clock</code>组件重新渲染的逻辑</p>
</li>
</ul>
<p><img src="https://image.cubox.pro/article/2022062223543722776/11574.jpg"></p>
<p>如果审查元素，在钟露出前，指针对应元素都是不动的：</p>
<p><img src="https://image.cubox.pro/article/2022062223543791121/80229.jpg"></p>
<p>当钟露出，加载并执行<code>JS</code>代码后，才开始执行动效：</p>
<p><img src="https://image.cubox.pro/article/2022062223543781442/79929.jpg"></p>
<h2 id="对数据hydrate"><a href="#对数据hydrate" class="headerlink" title="对数据hydrate"></a>对数据hydrate</h2><p>在传统<code>SSR</code>中，数据其实被初始化了两次：</p>
<ol>
<li><p>页面首次渲染，此时服务端导出的<code>HTML</code>中已经携带了首屏渲染的数据</p>
</li>
<li><p>框架<code>hydrate</code>后，数据再转化为框架内的状态供后续渲染</p>
</li>
</ol>
<p>在<code>Qwik</code>中，页面初始化时会存在<code>type</code>为<code>qwik/json</code>的<code>script</code>标签用于存储<strong>「当前页面中被激活的状态对应数据」</strong>：</p>
<p><img src="https://image.cubox.pro/article/2022062223543719277/48722.jpg"></p>
<p>什么叫<strong>「被激活」</strong>呢？</p>
<p>比如，下面是一篇文章的评论区，这是首屏渲染后的样子：</p>
<p><img src="https://image.cubox.pro/article/2022062223543758529/15512.jpg"></p>
<p>这些评论数据会出现在<code>qwik/json</code>保存的数据中么？</p>
<p>不会，因为没有交互激活他们。</p>
<p>我们发现，有一条评论被折叠了，点击后会展开这条评论：</p>
<p><img src="https://image.cubox.pro/article/2022062223543745523/38296.jpg"></p>
<p>点击这个行为会请求：</p>
<ul>
<li><p>点击逻辑对应的<code>JS</code>代码</p>
</li>
<li><p>这条评论对应组件的重新渲染逻辑</p>
</li>
</ul>
<p>此时，评论数据才会出现在<code>qwik/json</code>中，因为点击交互激活了这个数据。</p>
<p>所以在<code>Qwik</code>中，如无必要，数据不会被初始化两次。</p>
<p><code>HTML</code>中存在<strong>「未激活的数据」</strong>，<code>qwik/json</code>的<code>script</code>标签中保存了<strong>「激活的数据」</strong>，这个特性会带来一个很有意思的效果：</p>
<p>复制调试工具中<strong>「Elements面板下的DOM结构」</strong>后，再在新页面中粘贴，就能复现<strong>「页面当前的交互状态」</strong>（比如，输入框内仍然保留之前输入的内容）：</p>
<p><img src="https://image.cubox.pro/article/2022062223543797899/95494.jpg"></p>
<p>复制红框内的内容</p>
<p>换做其他框架，只能复现<strong>「页面初始时的状态」</strong>。</p>
<h2 id="交互时再请求JS不会卡么？"><a href="#交互时再请求JS不会卡么？" class="headerlink" title="交互时再请求JS不会卡么？"></a>交互时再请求JS不会卡么？</h2><p>有同学可能会问，如果在网络不好的情况下，交互时再请求<code>JS</code>代码不会让交互变得卡顿么？</p>
<p><code>Qwik</code>允许你指定<strong>「哪些组件可能是用户大概率会操作的」</strong>（比如电商应用中，购物车按钮被点击的概率高）。</p>
<p>这些组件逻辑对应<code>JS</code>代码会<code>prefetch</code>，在不影响首屏渲染的前提下被预请求：</p>
<p><img src="https://image.cubox.pro/article/2022062223543762124/31648.jpg"></p>
<p>并且这些组件<code>prefetch</code>的顺序是可以调整的。</p>
<p>这意味着可以追踪用户行为，以<strong>「用户交互的频率」</strong>为指标，作为组件<code>prefetch</code>优先级的依据，启发式提升应用性能。</p>
<p>这才是真正的<strong>「以用户为导向」</strong>的性能优化，而且是全自动的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当今是个前端框架百花齐放的时代，不同框架都在寻找自己独特的卖点。</p>
<p><code>Qwik</code>的卖点是：将<code>JS</code>代码的拆分从常见的<strong>「编译时」</strong>（比如<code>webpack</code>分块）、<strong>「运行时」</strong>（比如<code>dynamic import</code>），变为<strong>「交互时」</strong>。</p>
<p>对<code>JS</code>代码的极致拆分，只为达到一个目的 —— 在首屏渲染时，移除你项目中99%的<code>JS</code>代码。</p>
<p>你觉得这波操作怎么样？</p>
<p>- EOF -</p>
<p>推荐阅读点击标题可跳转</p>
<p>1、<a href="http://mp.weixin.qq.com/s?__biz=MzA5NjUxMTM2MQ==&mid=2247492704&idx=1&sn=c3ef8ce31bcd74b7473f7c13a80a6828&chksm=90ac508ea7dbd998876d60106081313129315f3504fa0364d4c93725c86e60e61f1b10de08e8&scene=21#wechat_redirect">9.6K Star！可扩展的 JS 富文本编辑框架！</a></p>
<p>2、<a href="http://mp.weixin.qq.com/s?__biz=MzA5NjUxMTM2MQ==&mid=2247492558&idx=1&sn=68a30ab75e050d17de2049d23ac51d9f&chksm=90ac5720a7dbde366e8742e7689801189c50c89322d44d129b59d6693ae3de9d9e0fd78f95d7&scene=21#wechat_redirect">44 道 JS 难题，做对一半就是高手</a></p>
<p>3、<a href="http://mp.weixin.qq.com/s?__biz=MzA5NjUxMTM2MQ==&mid=2247492715&idx=1&sn=0c35f7a875dbff4313844a362057d48d&chksm=90ac5085a7dbd993edac0c9d507719b677a0acf1e9c1d025329f12ff83ad41f4a6ee753179d0&scene=21#wechat_redirect">用 CSS 新特性直接实现虚拟列表？JS 往后稍稍</a></p>
<p>觉得本文对你有帮助？请分享给更多人</p>
<p>关注「大前端技术之路」加星标，提升前端技能</p>
<p>点赞和在看就是最大的支持❤️</p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzA5NjUxMTM2MQ==&mid=2247492786&idx=1&sn=d3981825085c5a6dc5e23941b4f3ca22&chksm=90ac505ca7dbd94a9ae6ddca9a38cc71baf3e53d106eac56232df13fba8f68a3a1ae06b9dfee&mpshare=1&scene=1&srcid=0716Xct8wV0rb2IS3iKN9cyL&sharer_sharetime=1662801976415&sharer_shareid=f9049818211070a874d51073efa3d8bf#rd">查看原网页: mp.weixin.qq.com</a></p>
]]></content>
      <categories>
        <category>学习类</category>
        <category>前端技术</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>减少渲染</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Parsing JavaScript with JavaScript</title>
    <url>/2022/09/09/%E5%AD%A6%E4%B9%A0%E7%B1%BB/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/Javascript/Parsing%20JavaScript%20with%20JavaScript/</url>
    <content><![CDATA[<p>Over the weekend I started working on <a href="https://github.com/Swizec/llamaduck">llamaduck</a>- a simple tool that aims to figure out whether your code will run on the newly released node 0.6.0. Eventually, it might be able to perform other compatibility assessment tasks as well, but I’m focusing on simple stuff first.</p>
<p>Or at least I thought it was simple.</p>
<span id="more"></span>
<p>The <a href="https://github.com/joyent/node/wiki/API-changes-between-v0.4-and-v0.6">list of API changes since 0.4.x</a> doesn’t seem that long and it should be easy enough to digest. But as it turns out, I spent almost all of Sunday just figuring out how to turn javascript into a beautiful analyzable <a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a>.</p>
<p>If you don’t know what an AST is – it’s a so-called abstract syntax tree, which means it should look identical regardless of what the actual syntax is. Although it will differ for different languages. So a CoffeeScript AST should look the same as JavaScript, but Python’s will differ.</p>
<h2 id="JavaScript-Alterations-and-Changes"><a href="#JavaScript-Alterations-and-Changes" class="headerlink" title="JavaScript Alterations and Changes"></a>JavaScript Alterations and Changes</h2><p>There are so many JavaScript alterations and changes that one may need to make as they work through the program that it is undoubtedly challenging for some people to keep up with precisely what they are supposed to do to take care of things like this. </p>
<p>What is known is that JavaScript alterations and changes can make life a lot more challenging for you in the short term, but it will pay off with a better product in the long run. </p>
<p>What I discovered was that there were a lot of changes that needed to be made to get JavaScript to line up just the way that I wanted it to. There are so many small and technical aspects of this kind of coding that need to be adhered to down to the letter, and it is certainly not easy to pull it off until one has a lot of time to sit down and figure out what they need to do. </p>
<p>JavaScript remains the dominant language used by computer programmers to put their materials out onto the Internet, so it made a lot of sense to me to start using this as a primary tool to get my own work done as well. I have continued to rely on JavaScript for projects both large and small, and I know that the only way that I get the most possible value out of it is to use it in ways that are effective for my customers. </p>
<p>The increased use of JavaScript for all programmers is something that has led me to believe that I must continue working on ways to make the most out of my time with this program and the skills that I know can be applied in the best ways possible to get my desired results. </p>
<p>When running <a href="https://dzone.com/articles/javascript-quiz-11">JavaScript</a> through the actual JavaScript program, it is common for programmers to run into some common issues. There are lines of exceptions that may appear at times, and there are other situations that arise which make it obvious that a certain piece of code is just not going to work as desired. If you run into that problem, just know that this is what the process is all about. Running the JavaScript through the program first is a great way to make sure those errors and omissions are eliminated from the final product. </p>
<p>Look over every piece of this very carefully and make sure you understand what you are looking at. You may just discover that there is a lot more that you could be doing to help out your users after all. </p>
<p>My research came up with <a href="https://dzone.com/articles/javascript-quiz-9">three options</a>:</p>
<ol>
<li><p>Take a parser generator and a JavaScript grammar, and hope for the best</p>
</li>
<li><p><a href="http://www.jslint.com/">JSLint</a> has a parser … somewhere around line 2000</p>
</li>
<li><p>Uglify-JS supposedly has a parser too</p>
</li>
</ol>
<p>The only viable option was uglify-js. It’s a neatly packaged node.js module that does a bit more than I need, but at least it’s got an easy-to-use parser with an exposed API interface.</p>
<h2 id="Score"><a href="#Score" class="headerlink" title="Score!"></a>Score!</h2><p>Here’s an example of a file that outputs its own <a href="https://dzone.com/articles/javascript-prototypal-inheritance">AST</a> to give you a feel for what I’m talking about:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;uglify-js&#x27;</span>).<span class="property">parser</span>;</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">(<span class="keyword">function</span> get\_ast (path, callback) &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFile</span>(path, <span class="string">&#x27;utf-8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"> </span><br><span class="line">        <span class="title function_">callback</span>(parser.<span class="title function_">parse</span>(data));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)(<span class="string">&#x27;./example.js&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="title function_">inspect</span>(data, <span class="literal">true</span>, <span class="literal">null</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>The file parses itself and outputs a tree encoded as a <a href="https://dzone.com/articles/javascript-module-system">javascript array</a> (scroll past the insanity, there’s a bit more text there):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[ <span class="string">&#x27;toplevel&#x27;</span>,</span><br><span class="line">  [ [ <span class="string">&#x27;var&#x27;</span>,</span><br><span class="line">      [ [ <span class="string">&#x27;parser&#x27;</span>,</span><br><span class="line">          [ <span class="string">&#x27;dot&#x27;</span>,</span><br><span class="line">            [ <span class="string">&#x27;call&#x27;</span>,</span><br><span class="line">              [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;require&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">              [ [ <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;uglify-js&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">                [length]: <span class="number">1</span> ],</span><br><span class="line">              [length]: <span class="number">3</span> ],</span><br><span class="line">            <span class="string">&#x27;parser&#x27;</span>,</span><br><span class="line">            [length]: <span class="number">3</span> ],</span><br><span class="line">          [length]: <span class="number">2</span> ],</span><br><span class="line">        [length]: <span class="number">1</span> ],</span><br><span class="line">      [length]: <span class="number">2</span> ],</span><br><span class="line">    [ <span class="string">&#x27;var&#x27;</span>,</span><br><span class="line">      [ [ <span class="string">&#x27;util&#x27;</span>,</span><br><span class="line">          [ <span class="string">&#x27;call&#x27;</span>,</span><br><span class="line">            [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;require&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">            [ [ <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;util&#x27;</span>, [length]: <span class="number">2</span> ], [length]: <span class="number">1</span> ],</span><br><span class="line">            [length]: <span class="number">3</span> ],</span><br><span class="line">          [length]: <span class="number">2</span> ],</span><br><span class="line">        [length]: <span class="number">1</span> ],</span><br><span class="line">      [length]: <span class="number">2</span> ],</span><br><span class="line">    [ <span class="string">&#x27;stat&#x27;</span>,</span><br><span class="line">      [ <span class="string">&#x27;call&#x27;</span>,</span><br><span class="line">        [ <span class="string">&#x27;function&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;get_ast&#x27;</span>,</span><br><span class="line">          [ <span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;callback&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">          [ [ <span class="string">&#x27;stat&#x27;</span>,</span><br><span class="line">              [ <span class="string">&#x27;call&#x27;</span>,</span><br><span class="line">                [ <span class="string">&#x27;dot&#x27;</span>,</span><br><span class="line">                  [ <span class="string">&#x27;call&#x27;</span>,</span><br><span class="line">                    [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;require&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">                    [ [ <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;fs&#x27;</span>, [length]: <span class="number">2</span> ], [length]: <span class="number">1</span> ],</span><br><span class="line">                    [length]: <span class="number">3</span> ],</span><br><span class="line">                  <span class="string">&#x27;readFile&#x27;</span>,</span><br><span class="line">                  [length]: <span class="number">3</span> ],</span><br><span class="line">                [ [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;path&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">                  [ <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">                  [ <span class="string">&#x27;function&#x27;</span>,</span><br><span class="line">                    <span class="literal">null</span>,</span><br><span class="line">                    [ <span class="string">&#x27;err&#x27;</span>, <span class="string">&#x27;data&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">                    [ [ <span class="string">&#x27;if&#x27;</span>,</span><br><span class="line">                        [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;err&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">                        [ <span class="string">&#x27;throw&#x27;</span>,</span><br><span class="line">                          [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;err&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">                          [length]: <span class="number">2</span> ],</span><br><span class="line">                        <span class="literal">undefined</span>,</span><br><span class="line">                        [length]: <span class="number">4</span> ],</span><br><span class="line">                      [ <span class="string">&#x27;stat&#x27;</span>,</span><br><span class="line">                        [ <span class="string">&#x27;call&#x27;</span>,</span><br><span class="line">                          [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;callback&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">                          [ [ <span class="string">&#x27;call&#x27;</span>,</span><br><span class="line">                              [ <span class="string">&#x27;dot&#x27;</span>,</span><br><span class="line">                                [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;parser&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">                                <span class="string">&#x27;parse&#x27;</span>,</span><br><span class="line">                                [length]: <span class="number">3</span> ],</span><br><span class="line">                              [ [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;data&#x27;</span>, [length]: <span class="number">2</span> ], [length]: <span class="number">1</span> ],</span><br><span class="line">                              [length]: <span class="number">3</span> ],</span><br><span class="line">                            [length]: <span class="number">1</span> ],</span><br><span class="line">                          [length]: <span class="number">3</span> ],</span><br><span class="line">                        [length]: <span class="number">2</span> ],</span><br><span class="line">                      [length]: <span class="number">2</span> ],</span><br><span class="line">                    [length]: <span class="number">4</span> ],</span><br><span class="line">                  [length]: <span class="number">3</span> ],</span><br><span class="line">                [length]: <span class="number">3</span> ],</span><br><span class="line">              [length]: <span class="number">2</span> ],</span><br><span class="line">            [length]: <span class="number">1</span> ],</span><br><span class="line">          [length]: <span class="number">4</span> ],</span><br><span class="line">        [ [ <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;./example.js&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">          [ <span class="string">&#x27;function&#x27;</span>,</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            [ <span class="string">&#x27;data&#x27;</span>, [length]: <span class="number">1</span> ],</span><br><span class="line">            [ [ <span class="string">&#x27;stat&#x27;</span>,</span><br><span class="line">                [ <span class="string">&#x27;call&#x27;</span>,</span><br><span class="line">                  [ <span class="string">&#x27;dot&#x27;</span>,</span><br><span class="line">                    [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;console&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">                    <span class="string">&#x27;log&#x27;</span>,</span><br><span class="line">                    [length]: <span class="number">3</span> ],</span><br><span class="line">                  [ [ <span class="string">&#x27;call&#x27;</span>,</span><br><span class="line">                      [ <span class="string">&#x27;dot&#x27;</span>,</span><br><span class="line">                        [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;util&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">                        <span class="string">&#x27;inspect&#x27;</span>,</span><br><span class="line">                        [length]: <span class="number">3</span> ],</span><br><span class="line">                      [ [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;data&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">                        [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;true&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">                        [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;null&#x27;</span>, [length]: <span class="number">2</span> ],</span><br><span class="line">                        [length]: <span class="number">3</span> ],</span><br><span class="line">                      [length]: <span class="number">3</span> ],</span><br><span class="line">                    [length]: <span class="number">1</span> ],</span><br><span class="line">                  [length]: <span class="number">3</span> ],</span><br><span class="line">                [length]: <span class="number">2</span> ],</span><br><span class="line">              [length]: <span class="number">1</span> ],</span><br><span class="line">            [length]: <span class="number">4</span> ],</span><br><span class="line">          [length]: <span class="number">2</span> ],</span><br><span class="line">        [length]: <span class="number">3</span> ],</span><br><span class="line">      [length]: <span class="number">2</span> ],</span><br><span class="line">    [length]: <span class="number">3</span> ],</span><br><span class="line">  [length]: <span class="number">2</span> ]</span><br></pre></td></tr></table></figure>

<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Now we have a simple tree we can <a href="https://dzone.com/articles/javascript-attacks-in-webviews">recursively analyze</a> and look for incompatibilities. But before anything really practical can be done I need to figure out how to track <a href="http://en.wikipedia.org/wiki/Scope_%2528programming%2529">variable scope</a>. That’s really the hard bit because the code needs to check when variables become a critical section and then confirm that they do in fact eventually get used in a critical way.</p>
<p>But once that nut is cracked <a href="https://github.com/Swizec/llamaduck">llamaduck</a> will be a neat little tool useful for many things.</p>
<p>If you’ve got some coding inclination, I’d love a helping hand over at the <a href="https://github.com/Swizec/llamaduck">llamaduck github repo</a>.</p>
<p>Related articles</p>
<ul>
<li><p><a href="http://coding.smashingmagazine.com/2011/10/27/lessons-from-a-review-of-javascript-code/">Lessons From A Review Of JavaScript Code</a> (coding.smashingmagazine.com)</p>
</li>
<li><p><a href="http://leuksman.com/log/2011/09/29/parserplayground-partial-internals-update/">ParserPlayground partial internals update</a> (leuksman.com)</p>
</li>
<li><p><a href="http://googleclosure.wordpress.com/2011/08/27/google-closure-introduction/">Google Closure Introduction</a> (googleclosure.wordpress.com)</p>
</li>
<li><p><a href="http://olabini.com/blog/2011/11/announcing-jescov-javascript-code-coverage/">Announcing JesCov – JavaScript code coverage</a> (olabini.com)</p>
</li>
<li><p><a href="http://www.mindscapehq.com/blog/index.php/2011/07/21/polyglot-programming-some-lessons-learned/">Polyglot programming – combining functional, dynamic and imperative languages</a> (mindscapehq.com)</p>
</li>
</ul>
<p>转载自：<a href="https://dzone.com/articles/parsing-javascript-javascript">https://dzone.com/articles/parsing-javascript-javascript</a></p>
]]></content>
      <categories>
        <category>学习类</category>
        <category>前端技术</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>ast</tag>
        <tag>提取元素</tag>
        <tag>转换</tag>
      </tags>
  </entry>
  <entry>
    <title>localStorage的高阶用法</title>
    <url>/2022/09/10/%E5%AD%A6%E4%B9%A0%E7%B1%BB/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/Javascript/localStorage%E7%9A%84%E9%AB%98%E9%98%B6%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="localStorage-的高阶用法"><a href="#localStorage-的高阶用法" class="headerlink" title="localStorage 的高阶用法"></a>localStorage 的高阶用法</h1><p>很多人在用 <code>localStorage</code> 或 <code>sessionStorage</code> 的时候喜欢直接用，明文存储，直接将信息暴露在；浏览器中，虽然一般场景下都能应付得了且简单粗暴，但特殊需求情况下，比如设置定时功能，就不能实现。就需要对其进行二次封装，为了在使用上增加些安全感，那加密也必然是少不了的了。为方便项目使用，特对常规操作进行封装。不完善之处会进一步更新…(更新于：2022.07.04 17:30) 已更新。</p>
<h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>封装之前先梳理下所需功能，并要做成什么样，采用什么样的规范，部分主要代码片段是以 <code>localStorage</code>作为示例，最后会贴出完整代码的。可以结合项目自行优化，也可以直接使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 区分存储类型 type</span></span><br><span class="line"><span class="comment">// 自定义名称前缀 prefix</span></span><br><span class="line"><span class="comment">// 支持设置过期时间 expire</span></span><br><span class="line"><span class="comment">// 支持加密可选，开发环境下未方便调试可关闭加密</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持数据加密 这里采用 crypto-js 加密 也可使用其他方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否支持 Storage isSupportStorage</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 setStorage</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 getStorage</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否存在 hasStorage</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有key getStorageKeys</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据索引获取key getStorageForIndex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取localStorage长度 getStorageLength</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取全部 getAllStorage</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 removeStorage</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空 clearStorage</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义参数 类型 window.localStorage,window.sessionStorage,</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;localStorage&#x27;</span>, <span class="comment">// 本地存储类型 localStorage/sessionStorage</span></span><br><span class="line">    <span class="attr">prefix</span>: <span class="string">&#x27;xxx_0.0.1&#x27;</span>, <span class="comment">// 名称前缀 建议：项目名 + 项目版本</span></span><br><span class="line">    <span class="attr">expire</span>: <span class="number">1</span>, <span class="comment">//过期时间 单位：秒</span></span><br><span class="line">    <span class="attr">isEncrypt</span>: <span class="literal">true</span> <span class="comment">// 默认加密 为了调试方便, 开发过程中可以不加密</span></span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="设置-setStorage"><a href="#设置-setStorage" class="headerlink" title="设置 setStorage"></a>设置 setStorage</h3><p>Storage 本身是不支持过期时间设置的，要支持设置过期时间，可以效仿 Cookie 的做法，<code>setStorage(key,value,expire)</code> 方法，接收三个参数，第三个参数就是设置过期时间的，用相对时间，单位秒，要对所传参数进行类型检查。可以设置统一的过期时间，也可以对单个值得过期时间进行单独配置。两种方式按需配置。</p>
<p>代码实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置 setStorage</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">setStorage</span> = (<span class="params">key, value, expire = <span class="number">0</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="string">&#x27;&#x27;</span> || value === <span class="literal">null</span> || value === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    value = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(expire) || expire &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Expire must be a number&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  expire = (expire ? expire : config.<span class="property">expire</span>) * <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">value</span>: value, <span class="comment">// 存储值</span></span><br><span class="line">    <span class="attr">time</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(), <span class="comment">//存值时间戳</span></span><br><span class="line">    <span class="attr">expire</span>: expire <span class="comment">// 过期时间</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> encryptString = config.<span class="property">isEncrypt</span></span><br><span class="line">    ? <span class="title function_">encrypt</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">    : <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">  <span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">setItem</span>(<span class="title function_">autoAddPrefix</span>(key), encryptString);</span><br><span class="line">&#125;;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="获取-getStorage"><a href="#获取-getStorage" class="headerlink" title="获取 getStorage"></a>获取 getStorage</h3><p>首先要对 <code>key</code> 是否存在进行判断，防止获取不存在的值而报错。对获取方法进一步扩展，只要在有效期内获取 <code>Storage</code> 值，就对过期时间进行续期，如果过期则直接删除该值。并返回 <code>null</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 getStorage</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getStorage</span> = key =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="literal">null</span>;</span><br><span class="line">  key = <span class="title function_">autoAddPrefix</span>(key);</span><br><span class="line">  <span class="comment">// key 不存在判断</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    !<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key) ||</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key)) === <span class="string">&#x27;null&#x27;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 优化 持续使用中续期</span></span><br><span class="line">  <span class="keyword">const</span> storage = config.<span class="property">isEncrypt</span></span><br><span class="line">    ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title function_">decrypt</span>(<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key)))</span><br><span class="line">    : <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key));</span><br><span class="line">  <span class="keyword">const</span> nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="comment">// 过期删除</span></span><br><span class="line">  <span class="keyword">if</span> (storage.<span class="property">expire</span> &amp;&amp; storage.<span class="property">expire</span> &lt; nowTime - storage.<span class="property">time</span>) &#123;</span><br><span class="line">    <span class="title function_">removeStorage</span>(key);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// // 未过期期间被调用 则自动续期 进行保活</span></span><br><span class="line">    <span class="comment">// setStorage(autoRemovePrefix(key), storage.value);</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isJson</span>(storage.<span class="property">value</span>)) &#123;</span><br><span class="line">      value = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(storage.<span class="property">value</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      value = storage.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="获取所有值"><a href="#获取所有值" class="headerlink" title="获取所有值"></a>获取所有值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取全部 getAllStorage</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getStorageAll</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> len = <span class="title function_">getStorageLength</span>(); <span class="comment">// 获取长度</span></span><br><span class="line">  <span class="keyword">let</span> arr = []; <span class="comment">// 定义数据集</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">key</span>(i);</span><br><span class="line">    <span class="comment">// 获取key 索引从0开始</span></span><br><span class="line">    <span class="keyword">const</span> getKey = <span class="title function_">autoRemovePrefix</span>(key);</span><br><span class="line">    <span class="comment">// 获取key对应的值</span></span><br><span class="line">    <span class="keyword">const</span> storage = config.<span class="property">isEncrypt</span></span><br><span class="line">      ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title function_">decrypt</span>(<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key)))</span><br><span class="line">      : <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">if</span> (storage.<span class="property">expire</span> &amp;&amp; nowTime - storage.<span class="property">time</span> &gt; storage.<span class="property">expire</span>) &#123;</span><br><span class="line">      <span class="title function_">removeStorage</span>(getKey);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> getVal = storage.<span class="property">value</span>;</span><br><span class="line">      <span class="comment">// console.log(Object.prototype.toString.call(value));</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isJson</span>(getVal)) &#123;</span><br><span class="line">        getVal = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(getVal);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 放进数组</span></span><br><span class="line">      arr.<span class="title function_">push</span>(&#123; <span class="attr">key</span>: getKey, <span class="attr">val</span>: getVal &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="删除-removeStorage"><a href="#删除-removeStorage" class="headerlink" title="删除 removeStorage"></a>删除 removeStorage</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 名称前自动添加前缀</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">autoAddPrefix</span> = (<span class="params">key</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> prefix = config.<span class="property">prefix</span> ? config.<span class="property">prefix</span> + <span class="string">&#x27;_&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span>  prefix + key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 removeStorage</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">removeStorage</span> = (<span class="params">key</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">removeItem</span>(<span class="title function_">autoAddPrefix</span>(key));</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="清空-clearStorage"><a href="#清空-clearStorage" class="headerlink" title="清空 clearStorage"></a>清空 clearStorage</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 清空 clearStorage</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">clearStorage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="加密、解密"><a href="#加密、解密" class="headerlink" title="加密、解密"></a>加密、解密</h3><p>加密采用的是 <code>crypto-js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装crypto-js</span></span><br><span class="line">npm install crypto-js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入 crypto-js 有以下两种方式</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CryptoJS</span> <span class="keyword">from</span> <span class="string">&quot;crypto-js&quot;</span>;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&quot;crypto-js&quot;</span>);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>对 <code>crypto-js</code> 设置密钥和密钥偏移量,可以采用将一个私钥经 <code>MD5</code> 加密生成16位密钥获得。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 十六位十六进制数作为密钥</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_KEY</span> = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(<span class="string">&quot;3333e6e143439161&quot;</span>);</span><br><span class="line"><span class="comment">// 十六位十六进制数作为密钥偏移量</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_IV</span> = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(<span class="string">&quot;e3bbe7e3ba84431a&quot;</span>);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>对加密方法进行封装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">data</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;encrypt error:&quot;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dataHex = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">  <span class="keyword">const</span> encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(dataHex, <span class="variable constant_">SECRET_KEY</span>, &#123;</span><br><span class="line">    <span class="attr">iv</span>: <span class="variable constant_">SECRET_IV</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">    <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> encrypted.<span class="property">ciphertext</span>.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>对解密方法进行封装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解密方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">data</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> encryptedHexStr = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Hex</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">  <span class="keyword">const</span> str = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Base64</span>.<span class="title function_">stringify</span>(encryptedHexStr);</span><br><span class="line">  <span class="keyword">const</span> decrypt = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(str, <span class="variable constant_">SECRET_KEY</span>, &#123;</span><br><span class="line">    <span class="attr">iv</span>: <span class="variable constant_">SECRET_IV</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">    <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> decryptedStr = decrypt.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span><br><span class="line">  <span class="keyword">return</span> decryptedStr.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>在存储数据及获取数据中进行使用：</p>
<p>这里我们主要看下进行加密和解密部分，部分方法在下面代码段中并未展示，请注意，不能直接运行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;localStorage&#x27;</span>, <span class="comment">// 本地存储类型 sessionStorage</span></span><br><span class="line">    <span class="attr">prefix</span>: <span class="string">&#x27;xxx_0.0.1&#x27;</span>, <span class="comment">// 名称前缀 建议：项目名 + 项目版本</span></span><br><span class="line">    <span class="attr">expire</span>: <span class="number">1</span>, <span class="comment">//过期时间 单位：秒</span></span><br><span class="line">    <span class="attr">isEncrypt</span>: <span class="literal">true</span> <span class="comment">// 默认加密 为了调试方便, 开发过程中可以不加密</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 setStorage</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">setStorage</span> = (<span class="params">key, value, expire = <span class="number">0</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="string">&#x27;&#x27;</span> || value === <span class="literal">null</span> || value === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    value = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(expire) || expire &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Expire must be a number&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  expire = (expire ? expire : config.<span class="property">expire</span>) * <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">value</span>: value, <span class="comment">// 存储值</span></span><br><span class="line">    <span class="attr">time</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(), <span class="comment">//存值时间戳</span></span><br><span class="line">    <span class="attr">expire</span>: expire <span class="comment">// 过期时间</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> encryptString = config.<span class="property">isEncrypt</span></span><br><span class="line">    ? <span class="title function_">encrypt</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">    : <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">  <span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">setItem</span>(<span class="title function_">autoAddPrefix</span>(key), encryptString);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 getStorage</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getStorage</span> = key =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="literal">null</span>;</span><br><span class="line">  key = <span class="title function_">autoAddPrefix</span>(key);</span><br><span class="line">  <span class="comment">// key 不存在判断</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    !<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key) ||</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key)) === <span class="string">&#x27;null&#x27;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 优化 持续使用中续期</span></span><br><span class="line">  <span class="keyword">const</span> storage = config.<span class="property">isEncrypt</span></span><br><span class="line">    ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title function_">decrypt</span>(<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key)))</span><br><span class="line">    : <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key));</span><br><span class="line">  <span class="keyword">const</span> nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="comment">// 过期删除</span></span><br><span class="line">  <span class="keyword">if</span> (storage.<span class="property">expire</span> &amp;&amp; storage.<span class="property">expire</span> &lt; nowTime - storage.<span class="property">time</span>) &#123;</span><br><span class="line">    <span class="title function_">removeStorage</span>(key);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// // 未过期期间被调用 则自动续期 进行保活</span></span><br><span class="line">    <span class="comment">// setStorage(autoRemovePrefix(key), storage.value);</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isJson</span>(storage.<span class="property">value</span>)) &#123;</span><br><span class="line">      value = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(storage.<span class="property">value</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      value = storage.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用的时候你可以通过 <code>import</code> 按需引入，也可以挂载到全局上使用，一般建议少用全局方式或全局变量，为后来接手项目继续开发维护的人，追查代码留条便捷之路！不要为了封装而封装，尽可能基于项目需求和后续的通用，以及使用上的便捷。比如获取全部存储变量，如果你项目上都未曾用到过，倒不如删减掉，留着过年也不见得有多香，不如为减小体积做点贡献！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;isSupportStorage, hasStorage, setStorage,getStorage,getStorageKeys,getStorageForIndex,getStorageLength,removeStorage,getStorageAll,clearStorage&#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/storage&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setStorage</span>(<span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line"><span class="title function_">getStorage</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>想省事点就全局注册下，推荐全局用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Storage</span> <span class="keyword">from</span> <span class="string">&#x27;@/libs/storage&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Storage</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$storage</span>.<span class="title function_">set</span>(<span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$storage</span>.<span class="title function_">get</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5081f9be56e4429b8c32be3f6392a6ea~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>该代码已进一步完善，需要的可以直接进一步优化，也可以将可优化或可扩展的建议，留言说明，我会进一步迭代的。可以根据自己的需要删除一些不用的方法，以减小文件大小。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * title: storage.js</span></span><br><span class="line"><span class="comment"> * Author: Gaby</span></span><br><span class="line"><span class="comment"> * Email:</span></span><br><span class="line"><span class="comment"> * Time: 2022/6/8 15:53</span></span><br><span class="line"><span class="comment"> * last: 2022/7/4 15:53</span></span><br><span class="line"><span class="comment"> * Desc: 对本地存储进行封装, 命名规范、设置过期时间、安全加密</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CryptoJS</span> <span class="keyword">from</span> <span class="string">&#x27;crypto-js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 十六位十六进制数作为密钥</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_KEY</span> = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(<span class="string">&#x27;3333e6e143439161&#x27;</span>);</span><br><span class="line"><span class="comment">// 十六位十六进制数作为密钥偏移量</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_IV</span> = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(<span class="string">&#x27;e3bbe7e3ba84431a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型 window.localStorage,window.sessionStorage,</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;sessionStorage&#x27;</span>, <span class="comment">// 本地存储类型 localStorage sessionStorage</span></span><br><span class="line">  <span class="attr">prefix</span>: <span class="string">&#x27;xxx_0.0.1&#x27;</span>, <span class="comment">// 名称前缀 建议：项目名 + 项目版本</span></span><br><span class="line">  <span class="attr">expire</span>: <span class="number">0</span>, <span class="comment">//过期时间 单位：秒</span></span><br><span class="line">  <span class="attr">isEncrypt</span>: <span class="literal">false</span> <span class="comment">// 默认加密 为了调试方便, 开发过程中可以不加密</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否支持 Storage</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isSupStorage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">window</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;当前环境非浏览器，无法消费全局window实例。&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">window</span>.<span class="property">localStorage</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;当前环境非无法使用localStorage&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">window</span>.<span class="property">sessionStorage</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;当前环境非无法使用sessionStorage&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> <span class="title class_">Storage</span> !== <span class="string">&#x27;undefined&#x27;</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 setStorage</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">setStorage</span> = (<span class="params">key, value, expire = <span class="number">0</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="string">&#x27;&#x27;</span> || value === <span class="literal">null</span> || value === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    value = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(expire) || expire &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Expire must be a number&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  expire = (expire ? expire : config.<span class="property">expire</span>) * <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">value</span>: value, <span class="comment">// 存储值</span></span><br><span class="line">    <span class="attr">time</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(), <span class="comment">//存值时间戳</span></span><br><span class="line">    <span class="attr">expire</span>: expire <span class="comment">// 过期时间</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> encryptString = config.<span class="property">isEncrypt</span></span><br><span class="line">    ? <span class="title function_">encrypt</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">    : <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">  <span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">setItem</span>(<span class="title function_">autoAddPrefix</span>(key), encryptString);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 getStorage</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getStorage</span> = key =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="literal">null</span>;</span><br><span class="line">  key = <span class="title function_">autoAddPrefix</span>(key);</span><br><span class="line">  <span class="comment">// key 不存在判断</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    !<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key) ||</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key)) === <span class="string">&#x27;null&#x27;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 优化 持续使用中续期</span></span><br><span class="line">  <span class="keyword">const</span> storage = config.<span class="property">isEncrypt</span></span><br><span class="line">    ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title function_">decrypt</span>(<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key)))</span><br><span class="line">    : <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key));</span><br><span class="line">  <span class="keyword">const</span> nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="comment">// 过期删除</span></span><br><span class="line">  <span class="keyword">if</span> (storage.<span class="property">expire</span> &amp;&amp; storage.<span class="property">expire</span> &lt; nowTime - storage.<span class="property">time</span>) &#123;</span><br><span class="line">    <span class="title function_">removeStorage</span>(key);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// // 未过期期间被调用 则自动续期 进行保活</span></span><br><span class="line">    <span class="comment">// setStorage(autoRemovePrefix(key), storage.value);</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isJson</span>(storage.<span class="property">value</span>)) &#123;</span><br><span class="line">      value = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(storage.<span class="property">value</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      value = storage.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否存在 hasStorage</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">hasStorage</span> = key =&gt; &#123;</span><br><span class="line">  key = <span class="title function_">autoAddPrefix</span>(key);</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="title function_">getStorageAll</span>().<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.<span class="property">key</span> === key;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="property">length</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有key</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getStorageKeys</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> items = <span class="title function_">getStorageAll</span>();</span><br><span class="line">  <span class="keyword">let</span> keys = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; items.<span class="property">length</span>; index++) &#123;</span><br><span class="line">    keys.<span class="title function_">push</span>(items[index].<span class="property">key</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> keys;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据索引获取key</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getStorageForIndex</span> = index =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">key</span>(index);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取localStorage长度</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getStorageLength</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取全部 getAllStorage</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getStorageAll</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> len = <span class="title function_">getStorageLength</span>(); <span class="comment">// 获取长度</span></span><br><span class="line">  <span class="keyword">let</span> arr = []; <span class="comment">// 定义数据集</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">key</span>(i);</span><br><span class="line">    <span class="comment">// 获取key 索引从0开始</span></span><br><span class="line">    <span class="keyword">const</span> getKey = <span class="title function_">autoRemovePrefix</span>(key);</span><br><span class="line">    <span class="comment">// 获取key对应的值</span></span><br><span class="line">    <span class="keyword">const</span> storage = config.<span class="property">isEncrypt</span></span><br><span class="line">      ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title function_">decrypt</span>(<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key)))</span><br><span class="line">      : <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">getItem</span>(key));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">if</span> (storage.<span class="property">expire</span> &amp;&amp; nowTime - storage.<span class="property">time</span> &gt; storage.<span class="property">expire</span>) &#123;</span><br><span class="line">      <span class="title function_">removeStorage</span>(getKey);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> getVal = storage.<span class="property">value</span>;</span><br><span class="line">      <span class="comment">// console.log(Object.prototype.toString.call(value));</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isJson</span>(getVal)) &#123;</span><br><span class="line">        getVal = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(getVal);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 放进数组</span></span><br><span class="line">      arr.<span class="title function_">push</span>(&#123; <span class="attr">key</span>: getKey, <span class="attr">val</span>: getVal &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 removeStorage</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">removeStorage</span> = key =&gt; &#123;</span><br><span class="line">  <span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">removeItem</span>(<span class="title function_">autoAddPrefix</span>(key));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空 clearStorage</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">clearStorage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">window</span>[config.<span class="property">type</span>].<span class="title function_">clear</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否可用 JSON.parse</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isJson</span> = value =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value) === <span class="string">&#x27;[object String]&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(value);</span><br><span class="line">      <span class="keyword">const</span> objType = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj);</span><br><span class="line">      <span class="keyword">return</span> objType === <span class="string">&#x27;[object Object]&#x27;</span> || objType === <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;error：&#x27; + value + &#x27;!!!&#x27; + e);</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 名称前自动添加前缀</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">autoAddPrefix</span> = key =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> prefix = config.<span class="property">prefix</span> ? config.<span class="property">prefix</span> + <span class="string">&#x27;_&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> prefix + key;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除已添加的前缀</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">autoRemovePrefix</span> = key =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> len = config.<span class="property">prefix</span> ? config.<span class="property">prefix</span>.<span class="property">length</span> + <span class="number">1</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> key.<span class="title function_">substr</span>(len);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">data</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">encrypt</span> = data =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;encrypt error:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dataHex = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">  <span class="keyword">const</span> encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(dataHex, <span class="variable constant_">SECRET_KEY</span>, &#123;</span><br><span class="line">    <span class="attr">iv</span>: <span class="variable constant_">SECRET_IV</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">    <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> encrypted.<span class="property">ciphertext</span>.<span class="title function_">toString</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解密方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">data</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">decrypt</span> = data =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> encryptedHexStr = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Hex</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">  <span class="keyword">const</span> str = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Base64</span>.<span class="title function_">stringify</span>(encryptedHexStr);</span><br><span class="line">  <span class="keyword">const</span> decrypt = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(str, <span class="variable constant_">SECRET_KEY</span>, &#123;</span><br><span class="line">    <span class="attr">iv</span>: <span class="variable constant_">SECRET_IV</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">    <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> decryptedStr = decrypt.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span><br><span class="line">  <span class="keyword">return</span> decryptedStr.<span class="title function_">toString</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">    <span class="comment">// 挂载全局</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Vue</span>.<span class="property">$storage</span>) &#123;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property">$storage</span> = &#123;</span><br><span class="line">        <span class="attr">set</span>: setStorage,</span><br><span class="line">        <span class="attr">get</span>: getStorage,</span><br><span class="line">        <span class="attr">getAll</span>: getStorageAll,</span><br><span class="line">        <span class="attr">getLen</span>: getStorageLength,</span><br><span class="line">        <span class="attr">isSub</span>: isSupStorage,</span><br><span class="line">        <span class="attr">isJson</span>: isJson,</span><br><span class="line">        <span class="attr">has</span>: hasStorage,</span><br><span class="line">        <span class="attr">del</span>: removeStorage,</span><br><span class="line">        <span class="attr">clear</span>: clearStorage</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property">$storage</span>.<span class="property">set</span> = setStorage;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property">$storage</span>.<span class="property">get</span> = getStorage;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property">$storage</span>.<span class="property">getAll</span> = getStorageAll;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property">$storage</span>.<span class="property">getLen</span> = getStorageLength;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property">$storage</span>.<span class="property">isSub</span> = isSupStorage;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property">$storage</span>.<span class="property">isJson</span> = isJson;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property">$storage</span>.<span class="property">has</span> = hasStorage;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property">$storage</span>.<span class="property">del</span> = removeStorage;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property">$storage</span>.<span class="property">clear</span> = clearStorage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">      <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$storage</span> = <span class="title class_">Vue</span>.<span class="property">$storage</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>来自：Gaby</p>
<p><a href="https://juejin.cn/post/7104301566857445412">https://juejin.cn/post/7104301566857445412</a></p>
</blockquote>
]]></content>
      <categories>
        <category>学习类</category>
        <category>前端技术</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>localStorage</tag>
        <tag>crypto-js</tag>
      </tags>
  </entry>
  <entry>
    <title>在线 SQL 数据库环境</title>
    <url>/2022/09/10/%E5%AD%A6%E4%B9%A0%E7%B1%BB/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/%E5%9C%A8%E7%BA%BFSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>大家好，我是只谈技术不剪发的 Tony 老师。今天给大家分享几个在线的免费 SQL 运行环境，也就是在线数据库。这些网站可以帮助我们快速运行一些 SQL 语句的测试或者验证，同时还可以在网络上进行分享，关键不需要自己安装数据库。</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>在线 SQL 数据库</th>
<th>支持数据库</th>
<th>是否需要注册</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://sqlfiddle.com/">SQL Fiddle</a></td>
<td>MySQL 5.6、Oracle 11g R2、PostgreSQL 9.6、SQLite 3.32.1 以及 SQL Server 2017</td>
<td>不需要</td>
<td>数据库不是最新版本</td>
</tr>
<tr>
<td><a href="https://www.db-fiddle.com/">DB Fiddle</a></td>
<td>MySQL 5.5 - MySQL 8.0、PostgreSQL 9.4 - PostgreSQL 13 以及 SQLite 3.30</td>
<td>不需要</td>
<td>支持团队协作</td>
</tr>
<tr>
<td><a href="https://dbfiddle.uk/">db&lt;&gt;fiddle</a></td>
<td>MySQL 5.5 - MySQL 8.0、MariaDB 10.3 - MariaDB 10.5、  Oracle 11g R2、Oracle 18c、PostgreSQL 9.5 - PostgreSQL 13、  DB2 11.1、Firebird 3.0、SQLite 3.27 以及 SQL Server 2014 - SQL Server 2019</td>
<td>不需要</td>
<td>支持产品最全，支持比较功能</td>
</tr>
<tr>
<td><a href="https://sqliteonline.com/">SQL Online</a></td>
<td>SQLite 3.30、MariaDB 10.4、PostgreSQL 12.4 以及 SQL Server 2019</td>
<td>不需要</td>
<td>共享功能需要注册</td>
</tr>
<tr>
<td><a href="https://livesql.oracle.com/">Oracle Live SQL</a></td>
<td>Oracle 19c</td>
<td>免费注册</td>
<td>学习 Oracle 首选</td>
</tr>
</tbody></table>
<h2 id="SQL-Fiddle"><a href="#SQL-Fiddle" class="headerlink" title="SQL Fiddle"></a>SQL Fiddle</h2><p><a href="http://sqlfiddle.com/">SQL Fiddle</a> 提供了 MySQL、Oracle、<a href="https://so.csdn.net/so/search?q=PostgreSQL&spm=1001.2101.3001.7020">PostgreSQL</a>、SQLite 以及 SQL Server 数据库环境，使用时无需注册。</p>
<p><img src="https://img-blog.csdnimg.cn/20200915222107872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hvcnNlcw==,size_16,color_FFFFFF,t_70#pic_center" alt="SQL Fiddle"><br>其中，左侧文本框用于输入初始化语句创建表结构和数据，点击“Build Schema📥”运行；也可以通过“Text to DDL”将格式化文本转换为 DDL 语句。右侧文本框用于输入 SQL 语句，点击“Run SQL▶️”执行，执行结果显示在页面下方；“Run SQL▶️”可以选择输出结果的格式，包括表格、普通文本 以及 Markdown 三种格式。</p>
<p>另外，复制网页地址可以分享本次测试的数据和结果，以上截图的地址为：<a href="http://sqlfiddle.com/#!9/a6c585/1">http://sqlfiddle.com/#!9&#x2F;a6c585&#x2F;1</a>。</p>
<h2 id="DB-Fiddle"><a href="#DB-Fiddle" class="headerlink" title="DB Fiddle"></a>DB Fiddle</h2><p><a href="https://www.db-fiddle.com/">DB Fiddle</a> 提供了 MySQL、PostgreSQL 以及 <a href="https://so.csdn.net/so/search?q=SQLite&spm=1001.2101.3001.7020">SQLite</a> 数据库的<strong>最新版本</strong>，使用时无需注册，同时也提供了付费版本。</p>
<p><img src="https://img-blog.csdnimg.cn/20200915224823664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hvcnNlcw==,size_16,color_FFFFFF,t_70#pic_center" alt="DB Fiddle"><br>其中，最左侧文本框可以输入本次测试的标题和描述。中间文本框用于输入初始化语句，点击“▶️Run”运行；也可以通过“Text to DDL”将格式化文本转换为 DDL 语句。最右侧文本框用于输入 SQL 查询，点击“▶️Run”执行，执行结果显示在页面下方。点击“Copy as Markdown”可以将输出结果以 Markdown 格式进行复制。</p>
<p>点击“💾Save”或者“💾Update”可以保存并生成唯一 URL，以上截图的地址为：<br><a href="https://www.db-fiddle.com/f/83V6zUSzX42ZpzrbX1txd7/1">https://www.db-fiddle.com/f/83V6zUSzX42ZpzrbX1txd7/1</a>。</p>
<p>DB Fiddle 另一个亮点是可以多人在线协作，点击“👥Collaborate”生成一个邀请链接，其他人点击即可加入协作，同时支持语音和文字聊天。</p>
<h2 id="db-lt-gt-fiddle"><a href="#db-lt-gt-fiddle" class="headerlink" title="db&lt;&gt;fiddle"></a>db&lt;&gt;fiddle</h2><p><a href="https://dbfiddle.uk/">db&lt;&gt;fiddle</a> 提供了 MySQL、MariaDB、Oracle、PostgreSQL、DB2、Firebird、SQLite 以及 SQL Server 数据库的<strong>各种版本</strong>，使用时无需注册。</p>
<p><img src="https://img-blog.csdnimg.cn/20200916091331914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hvcnNlcw==,size_16,color_FFFFFF,t_70#pic_center" alt="db&lt;&gt;fiddle"><br>这个网站应该是目前支持数据库种类最多的在线环境，而且每种数据库还提供了不同的版本。如果你点击“compare”，可以同时在两个不同的数据库中运行测试，比较它们的结果。</p>
<p>一旦点击“run”按钮之后，就可以生成一个唯一 URL。以上截图的地址为：<br><a href="https://dbfiddle.uk/?rdbms=sqlserver_2019l&fiddle=9bcd60e2bcd7966fc3be475addab8eb2">https://dbfiddle.uk/?rdbms=sqlserver_2019l&amp;fiddle&#x3D;9bcd60e2bcd7966fc3be475addab8eb2</a>。</p>
<h2 id="SQL-Online"><a href="#SQL-Online" class="headerlink" title="SQL Online"></a>SQL Online</h2><p><a href="https://sqliteonline.com/">SQL Online</a> 提供了 MariaDB、PostgreSQL、SQLite 以及 SQL Server 数据库环境，Oracle 数据库正在计划中。</p>
<p><img src="https://img-blog.csdnimg.cn/20200916094358342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hvcnNlcw==,size_16,color_FFFFFF,t_70#pic_center" alt="SQL Online"><br>其中，“File”按钮提供了本地保存和打开功能；“🌏Owner DB”可以连接到指定的远程数据库；“▶️Run”用于执行 SQL 语句；“📥Export”用于导出查询结果和 DDL 语句，支持 CSV、XML 以及 JSON 格式；“📤Import”用于从本地文件导入 DDL 和数据。页面右上角的“⚙️”可以用于设置界面风格。</p>
<p>另外，“Share”用于生成共享链接，需要注册一个免费账号才能使用。以上截图的地址为：<br><a href="https://sqliteonline.com/#fiddle=b10c1ad462ac37386ac200341b7bd05758a7059321bd675ecb6c2ed7aa563f38">https://sqliteonline.com/#fiddle=b10c1ad462ac37386ac200341b7bd05758a7059321bd675ecb6c2ed7aa563f38</a>。</p>
<p>团队协作功能“Team”需要付费才能使用。</p>
<h2 id="Oracle-Live-SQL"><a href="#Oracle-Live-SQL" class="headerlink" title="Oracle Live SQL"></a>Oracle Live SQL</h2><p><a href="https://livesql.oracle.com/">Oracle Live SQL</a> 是 Oracle 官方提供的在线 SQL 学习和分享环境，需要注册一个免费账号。</p>
<p><img src="https://img-blog.csdnimg.cn/20200916101558514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hvcnNlcw==,size_16,color_FFFFFF,t_70#pic_center" alt="Oracle Live SQL"><br>其中，SQL Worksheet 是输入和运行 SQL 语句的工作区，支持脚本的在线保存（私有脚本和共享脚本）和离线保存功能以及结果导出功能；My Session 提供了历史会话管理功能；Schema 提供了模式对象的查看功能，包括系统提供的模式，例如 HR、OE 等；Quick SQL 可以通过格式化文本快速创建 SQL 语句；My Scripts 保存了历史脚本；My Tutorials 是自定义的教程；Code Library 是其他人共享的教程和脚本库，可以点击运行或者下载使用。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在线数据库环境可以方便运行一些 SQL 测试和验证，同时可以在网络上分享和讨论。除了以上介绍的在线环境之外，还有一些 SQL 在线教程网站也提供了配套的运行环境，例如 <a href="http://sample.jimstone.com.cn/xsql/">SQL 学习网</a>、<a href="http://xuesql.cn/">XUESQL</a>、<a href="https://sqlzoo.net/wiki/SQL_Tutorial/zh">SQLZoo</a>、<a href="https://leetcode-cn.com/">力扣</a>、<a href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_in">w3schools</a>。</p>
<p>你还使用过哪些类似的网站值得推荐？</p>
<p>转载自： <a href="https://blog.csdn.net/horses/article/details/108603935">https://blog.csdn.net/horses/article/details/108603935</a></p>
]]></content>
      <categories>
        <category>学习类</category>
        <category>工具类</category>
        <category>在线工具</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>在线数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>打造一套知识笔记管理系统</title>
    <url>/2022/09/09/%E5%AD%A6%E4%B9%A0%E7%B1%BB/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/%E6%89%93%E9%80%A0%E4%B8%80%E5%A5%97%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="什么是知识管理系统？"><a href="#什么是知识管理系统？" class="headerlink" title="什么是知识管理系统？"></a><strong>什么是知识管理系统？</strong></h2><p>我们先不回答这个问题，直接上个场景~</p>
<p>假如你床头有10本书，你要在其中找到一本书，你会怎么找？</p>
<p>你可能会说，扫一眼就找到了啊。</p>
<p>但是，假如你现在身处世界上最大的图书馆：美国国会图书馆，藏书超2.1亿本，现在你想在里边找到某一本书，请问你如何找？</p>
<span id="more"></span>
<p>一本一本翻吗？累死你，2.1亿这个数字我给大家换算了一下，把2.1亿本书铺起来可绕地球近两圈。</p>
<p>不仅仅找书，图书馆每天还要在其中处理上千万次的查询、借书、还书、入库………</p>
<p>仅凭人脑是没有办法处理这么大的信息量的。</p>
<p>那么图书馆的管理人员，是如何解决这些问题的？</p>
<p>当让是靠着一套管理系统，让一切规律化，规则化，系统化，把人解放出来。</p>
<p>如果没有这套管理系统试想怎么样？</p>
<p><img src="https://pic3.zhimg.com/v2-9ed67ad17ea76244da44937419c4be22_b.jpg"></p>
<p>同理，我们的知识管理系统就相当于这个图书管理系统，而知识就如同这一本本图书，当有了套系统去管理它们以后，我们就相当于拥有了另外的一个大脑，如此就可以把我们大脑不擅长的东西，全部扔给这个外脑，让它帮助我们记忆，整理等等。</p>
<h2 id="为什么你必须要建立外脑？"><a href="#为什么你必须要建立外脑？" class="headerlink" title="为什么你必须要建立外脑？"></a><strong>为什么你必须要建立外脑？</strong></h2><p><strong>1.大脑是用来思考的，不是用来记忆的。</strong></p>
<p>记忆，尤其是死记硬背，是最反人性的，进化论告诉我们，大脑只会记住最能帮助我们生存的信息，至于无关紧要的，它为了节省脑力资源会尽可能的忘记它们，同样的大脑也只能处理眼下的小部分信息，而面对大量信息处理的时候，大脑就会罢工。</p>
<p>我们平常用脑的时候，感觉思绪乱，头昏脑涨，就是因为大脑处理的信息已经超过了它的负荷。<strong>大脑的机制天生就不是为了记忆和处理大量信息而设计的！！！</strong></p>
<p>但是在现实生活中，我们又需要处理和记住很多信息和知识点，以便使用的时候可以随用随取，那应该怎么办呢？</p>
<p>当然是建立外脑！！！</p>
<p><strong>前面说了我们大脑不擅长的记忆和大规模信息管理，但这却是我们外脑所擅长的。我们的大脑会遗忘，但是外脑它永远也不会忘的，你建立的这个外脑就会和你的大脑形成互补，各发挥其所长。</strong></p>
<p>正如上面的图书管理案例，我们不需要记住每本书的信息，我们想要的时候，只要知道怎么从图书管理系统中找到它们即可。</p>
<p><strong>所以想发挥大脑真正的威力，就把它从记忆中解放出来，让它去思考，而不是让它去记忆。</strong></p>
<p><img src="https://pic2.zhimg.com/v2-29787aace0e47868c4b7b7120d11282d_b.jpg"></p>
<p><strong>有同学看到这里可能会抬杠：有必要弄这么一个外脑吗，我大脑就够用了啊。</strong></p>
<p>当你只想做个“撸瑟”的时候，觉得这辈子能搬个砖，扛个水泥就够了，那么你就可以离开了，因为你确实没有这个需求。</p>
<p>但是你想获得不断成长，要获得更强的能力，想要在社会的激烈竞争中有足够的竞争力，你的知识储备必然需要被扩大，这种情况下，你要靠脑子记忆吗？回想你上学的生涯就知道了，那是多么痛的领悟~</p>
<p>正如上文案例，你只有十本书的时候，当然不需要建立外脑，想要啥扫一眼就够了，但是当你有1000本、10000本、一百万、一个亿本的时候呢？</p>
<p>以上只是我们必须建立外脑的一个理由之一，除此之外，还有一个更重要的理由。</p>
<p><strong>2.外脑是为了帮助大脑更好的记住：有逻辑关系的知识，你用的时候才能想起来。</strong></p>
<p>为什么会这样说呢？</p>
<p>同样我们先不回答这个问题，给你来个小测试。</p>
<p>现在思考一下：我让你说水果的名字，你看看你能说出多少个水果。</p>
<p>你可能会说，这有什么难的：苹果，香蕉，梨、橘子、火龙果、西瓜….</p>
<p>但是你发现越往下，你思考的时间就越长，越说不出来。</p>
<p>你可以先暂停阅读试试~</p>
<p>那么我再换一个问题，请告诉如西红柿炒鸡蛋怎么做？</p>
<p>你可能想都不用想，直接就可以脱口而出：准备食材–&gt;洗菜切菜—&gt;爆锅开炒—&gt;…..</p>
<p>为什么会这样？</p>
<p>因为前者大脑索引的是一个点一个点的信息，后者索引的一整个结构，一整套流程，一整张知识的网。</p>
<p>你看，点状的东西被大脑索引是很困难的，但是有逻辑有结构的东西则不同，后者一索引就是一大片，一整个体系。当你把点状的知识编织成一张网后，它们就会形成你的思维模型，这样，你用的时候才能想起来。</p>
<p>很多人抱怨，学过的东西用不出来，反思一下，从小到大，你调用你知识储备的时候是不是都像是上面想水果一样，想到哪是哪。</p>
<p>你整理过你的知识吗？你的知识是成结构的吗？你脑中有这么一张庞大的知识结构网吗？</p>
<p>而把知识打入外脑的过程就是在编织你这张网，所以<strong>建立外脑的本质就是体系化你知识的过程！！！</strong></p>
<p><img src="https://pic4.zhimg.com/v2-61fdb6c02c0328fbbe833308ea6fed17_b.jpg"></p>
<p><img src="https://pic1.zhimg.com/v2-bc1f631278260826362d9232e502c2f0_b.jpg"></p>
<p><strong>啰里八嗦了那么多，想必你已经知道建立『外脑』的重要性了，那么如何建立外脑呢？</strong></p>
<h2 id="如何建立外脑？"><a href="#如何建立外脑？" class="headerlink" title="如何建立外脑？"></a><strong>如何建立外脑？</strong></h2><p><strong>整个外脑是由两个系统构成。</strong></p>
<blockquote>
<p>第一个是储存笔记的系统。<br>第二个则是索引笔记的系统。</p>
</blockquote>
<p>你可以理解成一个放，一个拿，这里知道有这么个东西即可，后文会展开介绍。</p>
<p><img src="https://pic3.zhimg.com/v2-2d8ceffb24a325e9f722bccb17039faa_b.jpg"></p>
<p><strong>而整个外脑的搭建可以归纳为三步走~</strong></p>
<blockquote>
<p>第一步：把收集知识有序的装进去<br>第二步：把知识整理好，设立规则，以供随时提用。<br>第三步：用的时候可以迅速的把需要的知识拿出来。</p>
</blockquote>
<p><strong>整篇文章的核心下面一张图就概括了，但是为了让你彻底搞定这件事，我会掰开了揉碎了，一步步手把手带你搭出你的知识管理系统。</strong></p>
<p><img src="https://pic1.zhimg.com/v2-603637a4580259049585b12756f242e4_b.jpg"></p>
<p><strong>下面我们先从搭建储存体入手，从零开始搭建整个外脑系统~</strong></p>
<p><strong>一：选择外脑载体</strong></p>
<p>一台能正常跑的电脑系统，前提就是主机，显示屏这些硬件载体，你操作系统再牛逼，没有主机你也跑不起来。</p>
<p>同理，我们的外脑的搭建也是如此，所以建立外脑的第一步，就是找到外脑的载体，即存放我们知识的工具。</p>
<p>那么市面上提供给我们现成的外脑载体都有哪些呢？</p>
<p><img src="https://pic2.zhimg.com/v2-6645f5973db98026018e81d254a3a5b1_b.jpg"></p>
<p>太多太多了，主流的有道云笔记、印象笔记、onenote等，都可以作为我们外脑的载体，它们各有优缺点，想详细了解的同学请自行了解，我这里就不展开了，大家凭借喜好选择，总之，都是现成的，任君选择~</p>
<p>我本人的外脑载体为有道云笔记，下文演示，均以此笔记做案例，其他载体同理~</p>
<p><strong>当我们确定了大脑的载体以后呢？</strong></p>
<p>建立几个文件夹后，就开始一顿操作猛如虎，类似下面这样的吗？</p>
<p><img src="https://pic4.zhimg.com/v2-ed08ad30168db5cec861a1804ead7ae7_b.jpg"></p>
<p><strong>这样的外脑系统有什么问题呢？</strong></p>
<blockquote>
<p><strong>① 层次结构混乱：</strong>这样长长的列下来，我不知道你头大没有，别说提取了，我单单看到这一串，头就先大一圈了。  </p>
<p>因为这样混乱的结构，含糊其辞的目录，会让你翻看这些东西的时候，对这种凌乱有一种厌恶感。  </p>
<p><strong>② 提取困难：</strong>混乱的内容，会让真正用的时候找不到，所有的笔记，如果用的时候找不到，或者需要很大的功夫才能找到，那这个外脑系统就没多大意义了，当你笔记内容少的时候，你还能记得那是哪，但是当大到一定量级了呢，你的外脑一定会崩溃。  </p>
<p><strong>③ 知识碎片化</strong>：以上所建立的文件夹，之间都是割裂的，笔记与笔记间连接不起来。  </p>
<p>我们在文章开始的时候就说了，外脑的作用除了帮我们承担记忆的负担，还有一项职能就是辅助我们大脑为我们建立起知识体系，如果你的笔记之间都是一个个散乱的点，那么外脑的意义就要被砍掉一半。</p>
</blockquote>
<p><strong>一句话来说，上面的那些都不是一个好的外脑，因为它并没有解决我们为什么建立外脑的本质问题。</strong></p>
<p><strong>那么什么是好的外脑呢？</strong></p>
<blockquote>
<p><strong>1.知识结构体系化：</strong>笔记与笔记间的知识点不分散，不是乱七八糟的，不是碎片化的。<br><strong>2.方便管理：</strong>看到不头大，结构清晰，一目了然。<br><strong>3.提取方便，高效：</strong>最好高效到如同探囊取物，想到就能秒拿到。如果这一点满足不了，找一个想要的信息要半天，那么这套系统就没有多少意义。</p>
</blockquote>
<p><img src="https://pic2.zhimg.com/v2-c35e785dbc0171229ece31b4b655ecf9_b.jpg"></p>
<p>好了，到了这里你知道了，一个好的外脑的标准，随着而来的一个问题就是，如何才能让你的外脑达成以上标准。</p>
<p><strong>那么如何让外脑满足以上条件呢？</strong></p>
<p>正如电脑的windows系统一样，装上了，我们就无需用乱七八糟反人性的dos命令去让计算机工作，所有的一切都有序的跑在这套清爽的图形化系统之上。</p>
<p><strong>同理想让外脑不乱，你必须部署一套规则化的操作系统，让我们的知识笔记全部跑在这套管理系统之上，保证底盘不乱，根基稳，而不是随性而建。</strong></p>
<p>所以找到载体之后，不是一顿操作猛如虎，而是要给我们的外脑装上一个类似windows一样的底层系统，而我们这套跑在外脑载体上的系统就是GTD系统，所以我们建立外脑的第二步就是给它装上这套系统。</p>
<p><strong>二：部署GTD操作系统</strong></p>
<p><strong>① 什么是GTD系统？</strong></p>
<p>GTD 的英文全称是：Getting Things Done</p>
<p>这是由著名的时间管理人戴维・艾伦在他的著作《尽管去做》里提出的一套移动硬盘式的任务管理方法，它的核心精髓是把所有待办任务都从大脑里移出去，清空大脑，用外部的工具去管理任务，让大脑的全部资源都用来思考，而又不会遗漏任何一件事。</p>
<p>部署了GTD系统在笔记本上，我们就可以借助GTD的工作流，不仅拥有了知识管理系统，而且还把我们的日程管理系统也都囊括其中了，极大幅度的解放了我们的大脑。</p>
<p><img src="https://pic4.zhimg.com/v2-d4da044d35bbf26f6620452c9e6a6d3b_b.jpg"></p>
<p><strong>② 如何部署GTD系统到笔记本上？</strong></p>
<p>GTD工作流总共有 5 个步骤：收集、厘清、整理、归档、回顾。</p>
<p>而把它用到我们的外脑上就变成了信息管理流，同样也是五个步骤：</p>
<p>GTD信息流：收集箱、等待处理、将来可能、归档资料、专题研究。</p>
<p><img src="https://pic4.zhimg.com/v2-868ef7fb670138e700c8933a7ddf42cf_b.jpg"></p>
<p>下面分别介绍一下，我们设置的这五个文件夹可以干什么。</p>
<p><strong>1.收集箱</strong></p>
<p>这个就相当于你在各大平台点的收藏，比如我们拿手机刷到好文了（比如这篇文章哈~），我们就可以把各大平台的好文，一键集中扔到这个收集箱中。</p>
<p>这个东西的作用就是负责收集，你不必操心该放到那个分类，所有的好东西，一股脑扔进去就OK了，这样就可以大幅度的解放我们分类归类的时间，等到了一个固定的时间，比如晚上统一处理，这样既不打断我们当前手头的事情，同时又确保了收藏的文件不会乱七八糟，又能让你认真的评估和精读这篇文章，确保进入你笔记的都是精品。</p>
<p><img src="https://pic2.zhimg.com/v2-f1ed10943c450b8f2851275605789d69_b.jpg"></p>
<p><strong>2.等待处理</strong></p>
<p>这个文件夹承载我们当天的日程，备忘录，记事本，沉思录、日记本等等。</p>
<p>你应该有体会，大脑凭记忆力处理这些事情有多坑爹，我们就可以把这些事情交给外脑处理，把日程，待办事项等全部移到这个文件夹里，把这些事情全部从大脑中清理出去，想知道接下来要做什么事情直接来翻这个文件夹，效率高的飞起。</p>
<p><img src="https://pic2.zhimg.com/v2-411cab1d4b722b029103e30c329b85ad_b.jpg"></p>
<p><strong>3.将来可能</strong></p>
<p>这里主要承载计划、规划、想法、点子类的东西。</p>
<p>比如你看到了一个点子，发现了一个项目，你就可以先把它扔到这里，作为你的灵感库。</p>
<p><img src="https://pic2.zhimg.com/v2-4e80d6c4f9e4a3b50d1b1bbb682bf5dd_b.jpg"></p>
<p><strong>4.归档资料</strong></p>
<p>这个是我们的知识的大本营，最终所有的信息和笔记都会被归入到这个文件夹中，我们收集到的信息通过整理完毕以后，就放入这里，以供随手复习和使用的时候随时调取。</p>
<p><img src="https://pic1.zhimg.com/v2-145d0a2b2cbb38c9d7ed7fe101d2f1dc_b.jpg"></p>
<p><strong>5.专题研究</strong></p>
<p>比如我最近对唱歌比较感兴趣，那么我就可以单独这专题这里建立一个文件夹，专门服务于唱歌，当研究出成果了，再把它归入到归档资料中。</p>
<p><img src="https://pic2.zhimg.com/v2-9064a7d93fb88d3580b2486e3f1c063d_b.jpg"></p>
<p>当你在你的笔记本上，创建了这个5个文件夹后，你的GTD系统就部署完成了。</p>
<p>你看，部署了GTD，通过GTD来处理信息后，你的外脑是不是特别有层次感，是不是感觉外脑像是有了灵魂一样~，而不是类似于上面那四个笔记长长的一串。</p>
<p><img src="https://pic1.zhimg.com/v2-d456b432a51f79480296d6c8a9081474_b.jpg"></p>
<p>那么部署完GTD系统后就完了吗？当然不是。</p>
<p>完成了最底层系统的搭建，我们就要开始去处理输入进来的笔记了，前面说了，<strong>最终所有的笔记都会被汇总归档到『归档资料』这个文件夹之中，所以我们管理笔记的核心就在此文件夹中</strong>，但是那么多的笔记，怎么去管理啊，还是像上面图中那四个案例一样，列出长长的一串文件夹吗？</p>
<p>下面我们进入本文的第三个模块，来解决以上问题。</p>
<h2 id="三：规则化信息——给外脑立结构、给笔记立规矩。"><a href="#三：规则化信息——给外脑立结构、给笔记立规矩。" class="headerlink" title="三：规则化信息——给外脑立结构、给笔记立规矩。"></a><strong>三：规则化信息——给外脑立结构、给笔记立规矩。</strong></h2><p>我们都知道无规矩不成方圆，如果归入进来的笔记没有规则，那就会乱七八糟，完全没效率可言，所以我们必须要给输入进来的笔记进行处理，教给它们规矩，让它们变得清晰有规律，只有这样，你提取它的时候才能迅速找到你想要的。</p>
<p>但是要设立那些规矩呢？如何设立呢？</p>
<p>下面提供四大原则，保证让你的笔记规规矩矩的。</p>
<p><strong>① 最简层原则</strong></p>
<p><strong>什么是最简层原则？</strong></p>
<p>所谓最简层原则就是让文件夹尽可能的少，层级尽可能的少，因为只有数量少，你看起来才不会头大，如果还是一层又一层的文件夹，那就和前面你看到的那四张笔记没啥差别了。</p>
<p><strong>那么如何才能尽可能的少呢？</strong></p>
<p>当然是找一个可以把所有东西都包括进来的维度，它符合之前文章提到的MECE原则，既涵盖了所有笔记特性，又不遗漏，同时又不冗长。</p>
<p>我这里就提供给你一个这样的维度，以笔记的 “用处” 这一个维度进行划分，即：『学习』『工作』『生活』。</p>
<p>你可以随便想，从用处来论，任何笔记都不会逃过这个三个分类的，所以它是符合MECE的，我们就以它作为划分知识的标准，作为『归档资料』的打底文件夹，这样我们就实现了最简层。</p>
<p><img src="https://pic1.zhimg.com/v2-239f74cc80a691b998ea249a278b24c8_b.jpg"></p>
<p>打底文件夹有了，我们就需要根据自己的需求对文件夹做一些进一步细分，但如果你还是建立一串文件夹，整个笔记体系必然会乱，那么如何管理下一级的文件夹呢？</p>
<p>这就用到了让你笔记规矩的第二个原则！！！</p>
<p><strong>② 目录编码原则</strong></p>
<p><strong>什么是目录编码原则？</strong></p>
<p>你可以先思考下这个问题，一本书有那么多的知识点，它是怎么排版才让内容清晰一目了然的？</p>
<p>当然是把图书知识结构整理成目录按照层次编码啊，如下图，这样你看起来结构就会非常清晰，一目了然，同理，我们对文件夹的层级管理，同样采用这种方式，让文件夹的层级与层级之间建立起逻辑关系。</p>
<p><img src="https://pic4.zhimg.com/v2-b02bf1c6a1c11a52cb54cbdc0f290377_b.jpg"></p>
<p><strong>那如何目录编码呢?</strong></p>
<p>这里不进行赘述，我给你做了一张图，扫一眼估计你就会了。</p>
<p><img src="https://pic4.zhimg.com/v2-9bcc6a2ebfa8de026d9da30da6f71f3b_b.jpg"></p>
<p><strong>除了建立起清晰的逻辑层次外，为什么你一定要用目录编码？</strong></p>
<p>因为有了目录编码后，笔记就能实现自动排序！！  </p>
<p>笔记本一般都是按照名称排序的，比如，数字1在数字2前面，字母A在字母B前面，如此就会非常有序，可参考微信好友目录哈~  </p>
<p>如果你没给它这样规则化命名，则会出现乱序情况，会让笔记看起来乱七八糟的，但如果你设置了编码，就能实现自动排序，非常爽啊~</p>
<p>所以我们采用图书目录编码，一箭双雕，不仅让结构逻辑层次清晰，而且还能实现自动排序。</p>
<p>以上我们说了让你笔记规矩的四个原则的前两个原则，有了它们可以让你的笔记结构层次有了一个质的提升，但仅仅是层次清晰还远远不够，想要你的笔记规矩，你还需要第三个原则。</p>
<p><strong>③ 统一命名原则</strong></p>
<p><strong>什么是统一命名的原则？</strong></p>
<p>即：<strong>无论是文件夹还是笔记本身，都要遵循一套标准的命名原则</strong>，只有这样你的笔记才不会乱，切记把笔记命名成这样的无格式笔记，一旦养成这样的习惯，后期会让你有一种想锤死你自己的感觉，相信我~</p>
<p><img src="https://pic1.zhimg.com/v2-474e7891482456b0489c2bfae176ecb4_b.jpg"></p>
<p><strong>那么用什么标准命名呢？怎么命名？</strong></p>
<p>下面我给出三个方法，让你解决这个问题。</p>
<p><strong>1.用黄金圈法则命名文件夹</strong></p>
<p>你学习的任何一个知识点或专题都逃不过黄金圈的终极三问，即：是什么（what）、为什么（why）、如何做（how）。</p>
<p>比如你想研究演讲的话题，那么你就可以创建三个文件夹：</p>
<blockquote>
<p>1.什么是演讲？（what is 演讲）<br>2.为什么要学习和训练演讲？（why 演讲）<br>3.如何训练演讲？（how to 演讲）</p>
</blockquote>
<p>当你创建了这个三个文件夹后，你就可以把演讲相关的所有知识点按照黄金圈分出的三个文件夹分别归属，如此每个文件夹对应啥内容，一眼望穿~</p>
<p>你看，三个文件夹解决一切，而且看起来是那么的清晰，那么的一目了然~~</p>
<p><img src="https://pic2.zhimg.com/v2-2c1c4f004f745609be9dc06c2619877d_b.jpg"></p>
<p><strong>2.笔记文件规范化命名</strong></p>
<p>上面讲的是文件夹的命名方法，这里则是具体到的某个笔记文件命名。</p>
<p>这里也没有太多可讲的，我给你做了一张图，提供了一个公式，你看一眼就秒懂了。</p>
<p><img src="https://pic2.zhimg.com/v2-5d31ffcbcd95ffbb02e0bf68be63e9d1_b.jpg"></p>
<p><strong>规则化命名，效果示范~~</strong></p>
<p>你看，这样的笔记标题命名和上图的两小人那张笔记标题命名，那个看起来让人爽？</p>
<p><img src="https://pic4.zhimg.com/v2-404a995970003259b8ce54e40dada8fb_b.jpg"></p>
<p><strong>3.意义不明的层，坚决不要。</strong></p>
<p>还有很多同学会建一个『其他』的文件夹，请问，你这个『其他』是什么？</p>
<p>你之所以建这个『其他』就是因为，你也搞不通某个笔记文件属于那个类别了，不好分类的所幸一股脑的扔到这里边。</p>
<p>我告诉你，你在用的时候是根本不会去翻『其他』这个分类的，因为它在你脑中就没有啥概念，你都不知道你放了些啥，应该放些啥，又怎么能指望提取的时候找到呢？</p>
<p>所以，这种意义不明的层，坚决不要。</p>
<p><img src="https://pic3.zhimg.com/v2-0448e2c0d8f63787a83356320a9c97d6_b.jpg"></p>
<p>到了这里，你知道了让笔记规矩的三个原则，但是仅仅知道以上三个原则，还不能让它们很规矩，想要他们更规矩一些，你还需要第四个原则。</p>
<p><strong>④ 标签化原则</strong></p>
<p>什么是标签化原则？以及为什么要用标签去管理我们的笔记？</p>
<p>我先不回答这个问题，给你出道小题~</p>
<p>假如让你给伟人归类，你会把毛爷爷归到哪一类？</p>
<p><img src="https://pic4.zhimg.com/v2-d1c0ed64b779215f73ae749e7be3988f_b.jpg"></p>
<p>你会把毛爷爷归到政治家？思想家？军事家？……抱歉，这些头衔毛爷爷都占了~</p>
<p><img src="https://pic4.zhimg.com/v2-a41d0065d79c77804d4071df72c1090b_b.jpg"></p>
<p>你看，你是没有办法把他按单一的维度归类的。</p>
<p>如果你单一的把毛爷爷归到一个分类中，比如“诗人”，那么搜索其他分类，就找不到毛爷爷了，那你就把毛爷爷给定住在某个分类中了，这样做就是有漏的，同理，我们再来看个案例~</p>
<p>你会把前两年大火的《战狼2》归到什么分类中？你能对它进行单一归类吗？</p>
<p><img src="https://pic2.zhimg.com/v2-ebbcd779e5cff6b15fb10a8c80d50081_b.jpg"></p>
<p>我们之前的文章中讲维度的时候就已经说了，<strong>任何一件事物都可以有很多个维度。</strong>如果你把某事物按照一个维度归类，你就相当于把它给定死了，同理我们的知识依旧如此。</p>
<p><strong>你笔记里的知识，大部分都被你给定死了。</strong></p>
<p>很多人的笔记之所以没有效率，用的时候找不到，很大的原因就是你把知识给限定死了。</p>
<p>比如你学到了一个写作技巧 “如何煽情” ，如果你单纯的把这个技巧归入到 “写小说” 这个分类中，只有写小说的时候，你才会想起它，那么这个这个知识点就让你学死了，因为这个技巧完全可能套用到写文案，写报告等等….</p>
<p><strong>那么如何解决这个问题呢？</strong></p>
<p>这就回答了上面，为什么要用标签来管理笔记了的问题了。</p>
<p><strong>打标签就是为解决这个问题设置的，你可以给一个知识点打上无数个标签，当你搜索任何一个标签维度的时候都能够索引到这个知识点。</strong></p>
<p>正如上面案例中，只要你给毛爷爷打上了标签，无论你搜XX家，都能找到毛爷爷。而《战狼2》中你搜索商业片也能找到它，搜索战争片也能找到它，搜索吴京也能找到它….</p>
<p><strong>如此，我们就不用纠结于某个知识点具体该归入『储存体』的那个文件夹中，无论是你放到那，只要标签打上了，就不用担心索引问题。</strong></p>
<p>当你部署了一系列标签的时候，你的知识就活了。</p>
<blockquote>
<p>比如：『记忆』这个标签，当你想要这个标签的内容的时候，云笔记就会帮助你，把所有这个被你标记过这个标签的文章给找出来，无论它是你过去的读书笔记，或者是电视剧看到的，演讲听到的，课程中学到的，总之，只要包含这个标签的，一股脑的都会给你抓出来，供你调遣使用……</p>
</blockquote>
<p><img src="https://pic2.zhimg.com/v2-6fe942a6bbe6e5fb12d68c8c552860f9_b.jpg"></p>
<p>下面给你展示一下，<strong>我是如何给一个课程打标签的！！！</strong></p>
<p><img src="https://pic1.zhimg.com/v2-dca79d40ae5efc9f578a0203579758c4_b.jpg"></p>
<p>好了 ，看到这里你可能会说，完成以上部署，笔记的整体效率是高了很多，知识也给盘活了，但是以上知识之间仍然是割裂的，笔记与笔记间仍然形成不了体系，而且笔记量和标签一多，标签本身也就乱了，都不知道标签那个是哪个了，那如何解决这一系列问题呢？</p>
<p>下面，我们就进入本文的最后一个模块，部署索引体，让你的外脑的效率彻底飞起来~~</p>
<h2 id="四：部署索引体系统"><a href="#四：部署索引体系统" class="headerlink" title="四：部署索引体系统"></a><strong>四：部署索引体系统</strong></h2><p><strong>1.什么是储存体和索引体系统？</strong></p>
<p>储存体就是我们以上忙活的，那都是在部署储存体的系统，即在文件夹里的那一套。</p>
<p>我们前面说了，我们通过标签调取笔记或信息，而索引体系统，就是<strong>把标签与标签之间也建立起逻辑关系，形成体系和结构，最后内化成我们的知识体系。</strong>  </p>
<p>一句话解释，储存体用于管理 “文件夹的系统”，而索引体则用于管理 “标签的系统”。</p>
<p>为了让两者更有辨识度，文件夹系统作为储存体识别符号『C』，标签系统作为索引体，识别符『S』。</p>
<p><img src="https://pic1.zhimg.com/v2-d66c532c3b040fb05ab8e15667425620_b.jpg"></p>
<p><strong>2.如何搭建索引体？</strong></p>
<p><strong>① 底层系统搭建</strong>  </p>
<p>储存体有GTD作为底层操作系统，那么索引体同样也应该有操作系统作为分类。索引体的分类规则就是我们前文说的『学习』、『工作』、『生活』三个分类，因为你笔记上所有的东西都逃不过这三点，它是符合MECE的。</p>
<p><img src="https://pic1.zhimg.com/v2-6229fffd9f92028b1bcf0b07446ab768_b.jpg"></p>
<p>工作和生活的分类我这里不多介绍，因为这个体系不体系无所谓，大家按照自己的喜好打标签即可。这里主要介绍的是『学习』，因为这才是承载我们知识标签的大本营，我们所有的知识标签都以这个分类为底。  </p>
<p>那么在『学习』这个分类底下，应该怎么去构建知识架构呢？</p>
<p><strong>② 一个维度分类所有知识标签</strong>  </p>
<p>体系的构成一定有底层分类作为支撑的，所以想要把零散的标签，编织成系统就需要对他们进行分类，那么从作用的维度，你会把 “所有的知识” 标签分成哪几类？  </p>
<p>可能每个人都有自己的标准~  </p>
<p>我本人按照和参考了 “儒家的最高理想” 把一个人的一生所有的知识分成了四类：</p>
<p>即：修身的知识、齐家的知识、治国的知识、平天下的知识~  </p>
<p>哈哈，比较中二，不过我看着很顺眼，这个分类仅供参考，如果你也觉得这个维度不错，可以直接拿去用~</p>
<p><img src="https://pic3.zhimg.com/v2-6d9d01c88f236ee1404af72021b367aa_b.jpg"></p>
<p>好了，有了这个维度，你就可以把你在储存体里打上的标签，按照这四个维度，分门别类的整理在这里边即可，我截取一段我『索引体』系统中的整理效果，供大家参考~  </p>
<p>你可以看出来，当『索引体』逐渐完善以后，它就是一套完整，清晰的知识体系~~</p>
<p><img src="https://pic1.zhimg.com/v2-bc409efa4b87c92e59894ae58ce91bd8_b.jpg"></p>
<p><strong>③ 区别符号</strong>  </p>
<p>你可能看到索引体中每个对象的前面都有个符号，有的符号是『 # 』有的符号是『 - 』，这是什么意思呢？</p>
<p>这两个符号是区别符号，前面有『 # 』的，说明它是标签。  </p>
<p>而前面有『 - 』的说明它不是标签，这些东西的存在仅仅是为了连接标签，把标签串联成系统的连接符号，帮助我们看的更清晰，更有结构和层次感，它们是不参与索引的，当然『 - 』符号你可加可不加，但是『 # 』这个符号，我建议一定要加上，原因会在下面说。</p>
<p><strong>④ 通过『索引体』快速提取内容</strong>  </p>
<p>当一切都搭建完毕以后，剩下的就是我们提取东西的时候了，你可以通过单击标签提取，但是我最常用的就是搜索提取，想要啥，直接搜索，如探囊取物一样酸爽。</p>
<p>比如：在我笔记中，我搜索『写作』这个标签，你看~，云笔记会把我打这个标签的所有内容都给我找了出来。</p>
<p>无论是我个人的随手感想、我读书的笔记，或者我收集到的任何东西，只要它是在这个标签之下，瞬间提取~~</p>
<p><img src="https://pic2.zhimg.com/v2-beb923709de5b52f0686806a5941dd7d_b.jpg"></p>
<p><strong>⑤ 如何让提取效率更高？</strong></p>
<p>我们在实际的提取笔记的场景中，经常会遇到一个问题~</p>
<p>比如一本书的读书笔记，就在这一篇笔记中，它就可能涵盖无数个知识点，即使我用标签定位到了这篇笔记，想要找到笔记中的我想要的东西，也要翻看好久，那么有没有瞬间就能找到我想要的信息的方法呢？</p>
<p>有的，<strong>解决方案就是在笔记文件内处处打标签</strong>，如此可以瞬间找到我们想要的内容。</p>
<p>比如下图，我就在这个笔记的某一处的知识点，打上了三个标签，当我需要找这三个标签任意一个的时候，云笔记会迅速帮我找到它所在的位置，并且打上高亮，这样整篇文章都变成了我标签系统中的一个个知识点，它不再属于原作者，而是属于我体系中的一部分。</p>
<p>这就回答了上面所说的为什么要在标签上加一个#，原因就在这，如果你不加这个识别符号，搜索到的东西就会乱七八糟，异常痛苦啊，这是坑，我已经替你们踩过了~</p>
<p><img src="https://pic4.zhimg.com/v2-7c5dee04e92a6cd9d48a74e69c2302f3_b.jpg"></p>
<p>好了，到了这里，整篇文章也到了结尾了，这个剩下的你只需要在不断的学习过程中去完善和填充这个骨架，最终它就会形成一张庞大的知识结构网，到时候你就神功大成，就可以任意纵横了。</p>
<h2 id="打造完毕后最重要的事情是什么？"><a href="#打造完毕后最重要的事情是什么？" class="headerlink" title="打造完毕后最重要的事情是什么？"></a><strong>打造完毕后最重要的事情是什么？</strong></h2><p><strong>1.把笔记软件本身玩熟</strong></p>
<p>因为这篇文章不是介绍软件功能的，所以几乎没有提到软件本身提供给我们的功能，包括日程模板、思维导图、ORC等等太多太多了，你要是懂得笔记软件提供给我们的各种功能，那么你一定可以玩的非常6，这个大家请自行了解，网上有的是介绍的，我这里不进行赘述了。</p>
<p><strong>2.规律性的清理收集箱</strong></p>
<p>正如你装修房子一样，在装修的时候你可以一次性装修的美轮美奂，但是在生活中如果你邋邋遢遢，臭袜子，脏东西到处扔，很快你的新房子也就破旧了，想要让他一直焕然一新，高效运行，你就必须养成干净，卫生，自律的生活习惯。</p>
<p>同理我们的笔记系统依然如此，我们这次打造了一套超级牛逼的系统，但是如果你收集到的资料，长期堆积在收集箱中不去清理，内容被到处归类，那么这套系统很快就会被你搞残。</p>
<p>所以你的习惯，才是保持这套系统高效运转的关键！！！！！！！！</p>
<blockquote>
<p><strong>我个人的清理习惯是，每个周末拿出固定的时间，清理一次收集箱，当然如果你比我勤快，且时间充裕，完全可以一天一清理，这样肯定会更好。</strong></p>
</blockquote>
<p><strong>3.迭代内容，删掉过时的东西，填充空白的内容。</strong></p>
<p>刚开始建立起你的外脑的时候，不可能一下子就建成类似我外脑那样的丰富，肯定会有很多需要完善的地方，不断迭代，更新，这才是你的外脑能持续运转，并且越用越顺手的核心。</p>
<p>最后提醒一句：<strong>外脑要时常翻阅，只有你时常翻阅它，它才会内化到你的大脑中。</strong></p>
<p><img src="https://pic1.zhimg.com/v2-4117be7a870167eaa22b530d45da8324_b.jpg"></p>
<h2 id="文章到这里就结束了，下面我们把上面的内容总结一下！！！"><a href="#文章到这里就结束了，下面我们把上面的内容总结一下！！！" class="headerlink" title="文章到这里就结束了，下面我们把上面的内容总结一下！！！"></a><strong>文章到这里就结束了，下面我们把上面的内容总结一下！！！</strong></h2><p><strong>一：什么是知识管理系统？</strong></p>
<blockquote>
<p>知识管理系统就是我们的外脑。</p>
</blockquote>
<p><strong>二：为什么要搭建外脑？</strong></p>
<blockquote>
<p>1.信息量多了，我们的大脑是无法记住的，我们需要通过别的方式记住它，并且在用的时候，可以随手提取。  </p>
<p>2.搭建外脑，本身就是把零碎的东西体系化的过程，就是搭建知识体系的过程，大脑喜欢有结构的东西。</p>
</blockquote>
<p><strong>三：如何搭建外脑?</strong></p>
<p><strong>外脑的构成分成两个部分，第一部分为储存体搭建，第二部分为索引体搭建。</strong></p>
<p><strong>①：搭建储存体</strong></p>
<blockquote>
<p><strong>什么是储存体？</strong><br>储存体就是管理文件夹、储存笔记的系统  </p>
<p><strong>如何搭建储存体？</strong><br>1.以GTD信息流作为底层系统<br>2.规则化信息需要遵循四大原则，即：<br>（1）最简层原则<br>（2）目录编码原则<br>（3）统一命名原则<br>（4）标签化原则</p>
</blockquote>
<p><strong>②：搭建索引体</strong></p>
<blockquote>
<p><strong>什么是索引体？</strong><br>索引体就是管理标签的系统。  </p>
<p><strong>如何搭建索引体？</strong><br>1.以『学习』、『工作』、『生活』三分类为底层。<br>2.用一个维度涵盖所有『学习』的知识标签：修身的知识、齐家的知识、治国的知识、平天下的知识。  </p>
<p><strong>如何进一步提升索引效率？</strong><br>笔记内处处打标签</p>
</blockquote>
<p><strong>三：保证外脑的高效运转</strong></p>
<blockquote>
<p>1.玩转笔记软件功能<br>2.规律的清理收集箱<br>3.不断的填充完善，迭代更新笔记。</p>
</blockquote>
<p><img src="https://pic2.zhimg.com/v2-30e62eda1a5708b882269c27fe416175_b.jpg"></p>
<h2 id="精进书单推荐："><a href="#精进书单推荐：" class="headerlink" title="精进书单推荐："></a>精进书单推荐：</h2><p>如果对该话题感兴趣，老常为你精选和整理了主题书单，阅读建议按照从初级到高级已分类好，想要这个书单请自行移步老常公号【常青说】<strong>回复：知识体系</strong>，拿去不谢~</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a><strong>最后</strong></h2><p>如果文章对你有启发，请在下面的赞赏按钮给我寄来支票，你认为对你值多少钱，就给我寄多少钱~</p>
<p><strong>不便赞赏的同学，一波三连，点赞，关注、捧个人场，就是对我的巨大鼓励和支持！！！你的点赞决定我还要不要写下去，没赞，我更新的动力不足啊~~</strong></p>
<p>2.关注我 <a href="https://www.zhihu.com/people/9a0115dfed946bf2175e59a089763b69">@常青</a> 和 <a href="https://zhuanlan.zhihu.com/rbxxl">我的专栏</a> ， 第一时间收到干货~</p>
<p>3.在留言下评论和我一起探讨这个话题，我相信，我们可以碰撞出更多火花~</p>
<p>谢谢你的支持！<br>转载自<a href="https://zhuanlan.zhihu.com/p/191519306">https://zhuanlan.zhihu.com/p/191519306</a></p>
]]></content>
      <categories>
        <category>学习类</category>
        <category>工具类</category>
        <category>知识管理</category>
      </categories>
      <tags>
        <tag>笔记管理</tag>
        <tag>外脑</tag>
      </tags>
  </entry>
  <entry>
    <title>H5基于canvas实现电子签名并生成PDF文档</title>
    <url>/2022/09/09/%E5%AD%A6%E4%B9%A0%E7%B1%BB/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/H5/Canvas/H5%E5%9F%BA%E4%BA%8Ecanvas%E5%AE%9E%E7%8E%B0%E7%94%B5%E5%AD%90%E7%AD%BE%E5%90%8D%E5%B9%B6%E7%94%9F%E6%88%90PDF%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>电子签名通俗来说就是通过技术手段实现在电子文档上加载电子形式的签名，其作用类似于纸质合同上的手写签名或加盖的公章。虽然电子签名多年来合法性一直遭到质疑，但其在企业工作流审批、请柬、单据保全等场景应用广泛，最近的项目中就有这样一个手写签名并生成PDF文件的需求。</p>
<span id="more"></span>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><ul>
<li><ol>
<li>使用canvas来实现手写签名的功能，然后将canvas转化为图片，贴在签名的位置；</li>
</ol>
</li>
<li><ol start="2">
<li>将整个需要生成文档的dom区域使用html2canvas插件转成一张大图；</li>
</ol>
</li>
<li><ol start="3">
<li>使用JsPDF插件将上述图片生成PDF文档；</li>
</ol>
</li>
<li><ol start="4">
<li>对于文件内容较多的情况，需要合理选择分页位置；</li>
</ol>
</li>
</ul>
<h1 id="生成签名"><a href="#生成签名" class="headerlink" title="生成签名"></a>生成签名</h1><h2 id="1-在tsx中定义canvas画布"><a href="#1-在tsx中定义canvas画布" class="headerlink" title="1. 在tsx中定义canvas画布"></a>1. 在tsx中定义canvas画布</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">className</span>=<span class="string">&#123;styles.canvas&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;canvasDom&#125;</span> <span class="attr">width</span>=<span class="string">&quot;350&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>注意</code>：Canvas的宽高必须要使用内联样式定义，这是因为Canvas标签有自己的默认宽高300px×150px。它内联样式定义的width和height是绘画区域（画布）实际宽度和高度，绘制的图形都是在这个上面。如果在style外链文件中定义其width和height，那么这个width和height是Canvas在浏览器中被渲染的高度和宽度。如果Canvas中没有直接定义width和height没或值不正确，就会被设置成默认值{width:300px，height:150px}。所以，如果你在style中外链文件中设置了canvas {width: 200px; height: 200px;}，却没有直接在canvas上定义画布宽高，那么此时你输出canvas.height 值依旧为150，canvas.width值依旧为300。也就是一块150×300的画布在200×200的区域渲染，因而图片会出现拉伸、变形等现象。</p>
<h2 id="2-定义签名函数"><a href="#2-定义签名函数" class="headerlink" title="2. 定义签名函数"></a>2. 定义签名函数</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">const <span class="attr">writing</span> = (</span><br><span class="line">   beginX: number,</span><br><span class="line">   beginY: number,</span><br><span class="line">   stopX: number,</span><br><span class="line">   stopY: number,</span><br><span class="line">   ctx: any,</span><br><span class="line"> ) =&gt; &#123;</span><br><span class="line">   ctx.beginPath()<span class="comment">;  // 开启一条新路径</span></span><br><span class="line">   <span class="attr">ctx.globalAlpha</span> = <span class="number">1</span><span class="comment">;  // 设置图片的透明度</span></span><br><span class="line">   <span class="attr">ctx.lineWidth</span> = <span class="number">3</span><span class="comment">;  // 设置线宽</span></span><br><span class="line">   <span class="attr">ctx.strokeStyle</span> = <span class="string">&#x27;red&#x27;</span><span class="comment">;  // 设置路径颜色</span></span><br><span class="line">   ctx.moveTo(beginX, beginY)<span class="comment">;  // 从(beginX, beginY)这个坐标点开始画图</span></span><br><span class="line">   ctx.lineTo(stopX, stopY)<span class="comment">;  // 定义从(beginX, beginY)到(stopX, stopY)的线条（该方法不会创建线条）</span></span><br><span class="line">   ctx.closePath()<span class="comment">;  // 创建该条路径</span></span><br><span class="line">   ctx.stroke()<span class="comment">;  // 实际地绘制出通过 moveTo() 和 lineTo() 方法定义的路径。默认颜色是黑色。</span></span><br><span class="line"> &#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-注册监听事件"><a href="#3-注册监听事件" class="headerlink" title="3. 注册监听事件"></a>3. 注册监听事件</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">let beginX: number, beginY: number<span class="comment">;</span></span><br><span class="line">const canvas: <span class="attr">HTMLCanvasElement</span> = canvasDom.current<span class="comment">;</span></span><br><span class="line">const <span class="attr">ctx</span> = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>)<span class="comment">;</span></span><br><span class="line"><span class="attr">ctx.fillStyle</span> = <span class="string">&#x27;#fff&#x27;</span><span class="comment">;</span></span><br><span class="line">ctx.fillRect(0, 0, canvas.width, canvas.height)<span class="comment">;</span></span><br><span class="line">canvas.addEventListener(&#x27;touchstart&#x27;, function(event: any) &#123;</span><br><span class="line">  event.preventDefault()<span class="comment">; // 阻止在canvas画布上签名的时候页面跟着滚动</span></span><br><span class="line">  <span class="attr">beginX</span> = event.touches[<span class="number">0</span>].clientX - this.<span class="literal">off</span>setLeft<span class="comment">; </span></span><br><span class="line">  <span class="attr">beginY</span> = event.touches[<span class="number">0</span>].pageY - this.<span class="literal">off</span>setTop<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br><span class="line">canvas.addEventListener(&#x27;touchmove&#x27;, (event: any) =&gt; &#123;</span><br><span class="line">  event.preventDefault()<span class="comment">; // 阻止在canvas画布上签名的时候页面跟着滚动</span></span><br><span class="line">  <span class="attr">event</span> = event.touches[<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line">  let <span class="attr">stopX</span> = event.clientX - canvas.<span class="literal">off</span>setLeft<span class="comment">;</span></span><br><span class="line">  let <span class="attr">stopY</span> = event.pageY - canvas.<span class="literal">off</span>setTop<span class="comment">;</span></span><br><span class="line">  writing(beginX, beginY, stopX, stopY, ctx)<span class="comment">;</span></span><br><span class="line">  <span class="attr">beginX</span> = stopX<span class="comment">; // 这一步很关键，需要不断更新起点，否则画出来的是射线簇</span></span><br><span class="line">  <span class="attr">beginY</span> = stopY<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p><code>注意</code>：  </p>
<ul>
<li><ol>
<li>在注册“touchstart”和“touchmove”事件时，需要阻止默认事件，否则页面会跟着手势上下滑动。</li>
</ol>
</li>
<li><ol start="2">
<li>移动端的每个触摸事件对象中都包括了touches这个属性，它用于描述位于屏幕上的所有手指的一个列表，获取当前事件对象我们习惯性的使用event &#x3D; event.touches[0],而在PC端则不需要这么操作。</li>
</ol>
</li>
<li><ol start="3">
<li>offsetLeft值跟offsetTop值跟父级元素没关系，而是跟其上一级的定位元素(除position:static外的所有定位如fixed,relative,absolute元素)有关系。若上一级定位元素都没有除position:staice外的定位，则这个偏移量是相对于body而言的。</li>
</ol>
</li>
<li><ol start="4">
<li>需要理清移动端事件对象的几个属性，⏬<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02d0ae583f3f4692be28339e6a6234eb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp"> clientX&#x2F;clientY: 触摸位置距离当前body可视区域的x,y坐标;<br>   pageX&#x2F;pageY: 对于整个页面来说，触摸位置距离body左上角的x,y坐标，包括被scrollTop和scrollLeft的值；<br>   screenX&#x2F;screenY: 触摸位置距离显示器左边和顶部的x,y距离。<br>   所以，在获取结束点坐标的时候，如果当前页面没有出现滚动条，使用clientY和pageY计算差别不大，如果页面比较长，出现了滚动条，那么就必须要使用pageY来计算。clientX同理，但是移动端通常横向滚动的场景不多，所以用clientX来计算即可。</li>
</ol>
</li>
<li><ol start="5">
<li>在签名（touchmove）这个动作过程中，我们需要不断的更新起点位置，否则画出来是这样🔽 <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/baf10d6559194e96bc5f9e5612d8e0b1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp"><br>   其实这个原理和微积分很相似，线段本质上就是由无穷多个小线段组成，宏观一点来看可以把线段当成一个个长度很小的小线段首尾相连构成。所以我一直觉得编程编到最后就是考验一个人的数学能力，交并集、逻辑思维、算法等都能看到数学的身影。最后生成签名如下： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35213da74a8042eca215e6e71510a545~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp"></li>
</ol>
</li>
</ul>
<h1 id="生成PDF文档"><a href="#生成PDF文档" class="headerlink" title="生成PDF文档"></a>生成PDF文档</h1><p>html2canvas是一款将HTML代码转换成Canvas的插件，因此需要用一个div包裹住需要打印的内容区域，获得这个dom节点。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html2Canvas</span>(dom, &#123;</span><br><span class="line">    allowTaint: true,</span><br><span class="line">    <span class="attribute">width</span>: dom.offsetWidth, <span class="comment">//设置获取到的canvas宽度</span></span><br><span class="line">    <span class="attribute">height</span>: dom.offsetHeight, <span class="comment">//设置获取到的canvas高度</span></span><br><span class="line">    <span class="attribute">x</span>: <span class="number">0</span>, <span class="comment">//页面在水平方向滚动的距离</span></span><br><span class="line">    <span class="attribute">y</span>: <span class="number">0</span>, <span class="comment">//页面在垂直方向滚动的距离</span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<p><code>注意</code>：此处需要设置width和height及x,y，否则当页面内容只有一页的时候没有问题，但是若页面内容有很多页的时候，就会出现生成的图片只有一小部分有内容的现象。问题就出现在这个配置参数上，若没有设置宽高，则默认只取当前视口的内容，丢弃掉其他超出当前视口的内容。<br>设置打印参数：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">const <span class="attr">print</span> = () =&gt; &#123;</span><br><span class="line">    let dom: <span class="attr">HTMLElement</span> = pdfDom.current<span class="comment">;</span></span><br><span class="line">    html2Canvas(dom, &#123;</span><br><span class="line">      allowTaint: true,</span><br><span class="line">      width: dom.offsetWidth, //设置获取到的canvas宽度</span><br><span class="line">      height: dom.offsetHeight, //设置获取到的canvas高度</span><br><span class="line">      x: 0, //页面在水平方向滚动的距离</span><br><span class="line">      y: 0, //页面在垂直方向滚动的距离</span><br><span class="line">    &#125;).then((canvas: HTMLCanvasElement) =&gt; &#123;</span><br><span class="line">      let <span class="attr">canvasWidth</span> = canvas.width<span class="comment">;</span></span><br><span class="line">      let <span class="attr">canvasHeight</span> = canvas.height<span class="comment">;</span></span><br><span class="line">      let <span class="attr">pageHeight</span> = (canvasWidth / <span class="number">592.28</span>) * <span class="number">841.89</span><span class="comment">; // 一页A4 pdf能显示的canvas高度</span></span><br><span class="line">      let <span class="attr">imgWidth</span> = <span class="number">595.28</span><span class="comment">; // 设置图片宽度和A4纸宽度相等</span></span><br><span class="line">      let <span class="attr">imgHeight</span> = (<span class="number">592.28</span> / canvasWidth) * canvasHeight<span class="comment">;//等比例换算成A4纸的高度</span></span><br><span class="line">      let <span class="attr">totalHeight</span> = imgHeight<span class="comment">; // 需要打印的图片总高度，初始状态和图片高度相等</span></span><br><span class="line">      let <span class="attr">pageData</span> = canvas.toDataURL(<span class="string">&#x27;image/png&#x27;</span>, <span class="number">1.0</span>)<span class="comment">;</span></span><br><span class="line">      let <span class="attr">PDF</span> = new JsPDF(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;pt&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="literal">true</span>)<span class="comment">;</span></span><br><span class="line">      if (totalHeight &lt; pageHeight) &#123; //</span><br><span class="line">        PDF.addImage(pageData, &#x27;JPEG&#x27;, 0, 0, imgWidth, imgHeight)<span class="comment">; // 从顶部开始打印</span></span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        let <span class="attr">top</span> = <span class="number">0</span><span class="comment">;   // 打印初始区域</span></span><br><span class="line">        while (totalHeight &gt; 0) &#123;</span><br><span class="line">          PDF.addImage(pageData, &#x27;JPEG&#x27;, 0, top, imgWidth, imgHeight)<span class="comment">;  // 从图片顶部往下top位置开始打印</span></span><br><span class="line">          totalHeight <span class="attr">-</span>= pageHeight<span class="comment">;</span></span><br><span class="line">          top <span class="attr">-</span>= <span class="number">841.89</span><span class="comment">;</span></span><br><span class="line">          if (totalHeight &gt; 0) &#123;</span><br><span class="line">            PDF.addPage()<span class="comment">;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      PDF.save(&#x27;test.pdf&#x27;)<span class="comment">;</span></span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">  &#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="选择分页位置"><a href="#选择分页位置" class="headerlink" title="选择分页位置"></a>选择分页位置</h2><p>按照上述步骤生成了一份PDF文档，但是当PDF页数有很多的时候，会有这样的问题⏬ <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48b4e14d68514b63a3844e15114ebb81~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp"> 可以看到，分页的时候从这段文字这里懒腰截断了。这显然不是我们想要看到的效果，如何解决这个问题呢？🤔</p>
<ul>
<li>PDF文档页数较少的情况 可以在开发测试的时候预先在将要分页的地方插入一个padding，就是提前预留分页位置</li>
<li>PDF文档页数较多 对于这种情况，笔者尝试遍历要打印的dom节点的子节点，将每一页所能打印的dom节点高度累加，若超过了页面所能承载的最大高度，则将最后一个节点增加padding，打印完毕将样式还原。这种方法因为要计算每个dom节点的高度，非常耗性能，也要求页面dom元素的颗粒度较细，否则会出现一个页面有大块空白，完全无法模拟出word生成pdf的那种效果，所以就不展开讨论了。如若有读者有比较好的解放方案，欢迎不吝赐教，感谢~❤️</li>
</ul>
<p>转载自：<a href="https://juejin.cn/post/6901273585428463624">https://juejin.cn/post/6901273585428463624</a></p>
]]></content>
      <categories>
        <category>学习类</category>
        <category>前端技术</category>
        <category>H5</category>
        <category>Canvas</category>
      </categories>
      <tags>
        <tag>电子签名</tag>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>解放双手的效率神器，能自动的咱绝不手动！</title>
    <url>/2022/09/10/%E5%AD%A6%E4%B9%A0%E7%B1%BB/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E8%87%AA%E5%8A%A8%E5%8C%96/%E8%A7%A3%E6%94%BE%E5%8F%8C%E6%89%8B%E7%9A%84%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8%EF%BC%8C%E8%83%BD%E8%87%AA%E5%8A%A8%E7%9A%84%E5%92%B1%E7%BB%9D%E4%B8%8D%E6%89%8B%E5%8A%A8%EF%BC%81/</url>
    <content><![CDATA[<h1 id="解放双手的效率神器，能自动的咱绝不手动！"><a href="#解放双手的效率神器，能自动的咱绝不手动！" class="headerlink" title="解放双手的效率神器，能自动的咱绝不手动！"></a>解放双手的效率神器，能自动的咱绝不手动！</h1><p><a href="http://mp.weixin.qq.com/s?__biz=MzA5NjEwNjE0OQ==&mid=2247511293&idx=1&sn=7fd446fb2ead8f17bd60c40dca421b63&chksm=90b7cf37a7c046217e3009c2b784b89308282139dc3bd331532f4d7a7ce53a5561b918dc09ec&mpshare=1&scene=1&srcid=08160Ak0fgOx58iYjydF9pso&sharer_sharetime=1662801889409&sharer_shareid=f9049818211070a874d51073efa3d8bf#rd">mp.weixin.qq.com</a>砺心 阿虚同学</p>
<p><img src="https://image.cubox.pro/article/2021072410131755374/79225.jpg"></p>
<p>阿虚同学-</p>
<p>读完需要</p>
<p>5</p>
<p>分钟</p>
<p>速读仅需 3分钟</p>
<p><img src="https://image.cubox.pro/article/2021072711550215262/46718.jpg"></p>
<p>平时办公或者游戏，可能大家或多或少都遇到过一些需要重复操作的场景</p>
<p>比如重复截图、重复的复制粘贴录入数据、重复提交数据、重复选择同类数据删除等…<img src="https://image.cubox.pro/article/2022081620421713809/88514.jpg"></p>
<p>但很多时候，我们其实可以利用一些自动化软件来帮助我们解决此类问题！</p>
<p><strong>白日梦想家大青蛙-娱乐天空（Cover：陈奕迅）</strong> 合集</p>
<p><strong><em>1</em></strong></p>
<p><strong>键盘鼠标操作录制</strong></p>
<p>简单的情况是你<strong>无需做逻辑判断</strong>，仅需重复鼠标键盘的操作即可解决问题，那针对这种阿虚先来推荐几款好用的软件</p>
<p><strong><em>1.1</em></strong></p>
<p><strong><strong>按键精灵</strong></strong></p>
<p>创立于2001年按键精灵或许是最出名的键鼠操作录制工具了：<a href="http://download.myanjian.com/">http://download.myanjian.com/</a></p>
<p>虽然在XP／WIN7时代，各种基于按键精灵的游戏脚本层出不穷，但实际上如果把它用于自动化办公，那真的是绝佳的工具<img src="https://image.cubox.pro/article/2022081620421724100/48113.jpg"></p>
<p><img src="https://image.cubox.pro/article/2022081620421769952/74952.jpg"></p>
<p>按键精灵的使用要复杂可以很复杂——你可以自行进行编程</p>
<p>要简单也可以很简单——直接点击「录制脚本」，就可以录制键盘鼠标操作了</p>
<p><img src="https://image.cubox.pro/article/2022081620421756790/27049.jpg"></p>
<p>按键精灵的一大优势是<strong>免费就可以生成独立的自动化小程序</strong>，方便你直接用于分享<img src="https://image.cubox.pro/article/2022081620421749466/94993.jpg"></p>
<p>比如阿虚以前在<a href="https://mp.weixin.qq.com/s?__biz=MzA5NjEwNjE0OQ==&mid=2247486860&idx=1&sn=8db76bdc3c70ba431db1911314c3cdbd&scene=21#wechat_redirect">批量去除PDF水印</a>那期教程就用到了按键精灵，搭配 Foxit PDF Editor 便可以很轻松的去除某一类的PDF水印</p>
<p><strong><em>1.2</em></strong></p>
<p><strong><strong>Tingtask</strong></strong></p>
<p>按键精灵的功能是强大，但是用起来可能略显复杂，并且很臃肿还_有广告，软件也停更有8年之久了_<img src="https://image.cubox.pro/article/2022081620421726442/63711.jpg"></p>
<p>如果你只有简单的操作录制需求，你也可以考虑仍在更新之中的 Tingtask 这款小工具</p>
<p>这款软件<strong>绿色免安装</strong>，下载即用，整个软件不到2MB大小！</p>
<p>界面和功能都简单到无需过多介绍，一看就懂，最大的优势就是<strong>可以轻松调整录制好之后动作的播放速度！</strong>根据你的使用场景，这个倍速功能可是能帮你节约非常多的时间<img src="https://image.cubox.pro/article/2022081620421722886/12698.jpg"></p>
<p><img src="https://image.cubox.pro/article/2022081620421777458/28557.jpg"></p>
<p>阿虚之前就分享过<a href="https://mp.weixin.qq.com/s?__biz=MzA5NjEwNjE0OQ==&mid=2247494665&idx=1&sn=874140ab3dc924741ea3a6eb5a25cfb8&scene=21#wechat_redirect">利用Tingtask变相实现下载那些被限制只能在线查看的PDF</a>，只要你善加利用，他能发挥作用的场景超乎你的想象！</p>
<p>这款软件软件的官网是：<a href="https://thetinytask.com/%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%88%B0%E5%AE%98%E7%BD%91%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD%EF%BC%8C%E4%BD%86%E6%98%AF%E5%AE%98%E7%BD%91%E7%9A%84%E7%89%88%E6%9C%AC%E5%B9%B6%E6%B2%A1%E6%9C%89%E8%BF%9B%E8%A1%8C%E6%B1%89%E5%8C%96%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%85%B3%E6%B3%A8_%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%9A%E9%98%BF%E8%99%9A%E5%90%8C%E5%AD%A6_%EF%BC%8C%E5%9C%A8%E5%85%AC%E4%BC%97%E5%8F%B7%E5%90%8E%E5%8F%B0%E5%8F%91%E9%80%81%E4%BB%A5%E4%B8%8B%E5%85%B3%E9%94%AE%E8%AF%8D%EF%BC%8C%E5%90%8E%E5%8F%B0%E5%8D%B3%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%9B%9E%E5%A4%8D**%E6%B1%89%E5%8C%96%E7%89%88**%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%9A">https://thetinytask.com/，你可以到官网免费下载，但是官网的版本并没有进行汉化，你可以关注_微信公众号：阿虚同学_，在公众号后台发送以下关键词，后台即会自动回复**汉化版**的下载地址：</a></p>
<blockquote>
<p>“</p>
<p>自动化</p>
<p>”</p>
</blockquote>
<p><strong><em>1.3</em></strong></p>
<p><strong><strong>Keymousego👍</strong></strong></p>
<p>Keymousego 也是一款绿色开源的操作录制工具，并且还在_持续更新中_，软件可以直接到Github上下载：<a href="https://github.com/taojy123/KeymouseGo">https://github.com/taojy123/KeymouseGo</a></p>
<p>如果你访问Github困难，建议了解<a href="https://mp.weixin.qq.com/s?__biz=MzA5NjEwNjE0OQ==&mid=2247503500&idx=1&sn=aeb2d62d81beb93695b323df9a67b9d7&scene=21#wechat_redirect">《2022 Github加速访问教程》</a></p>
<p>和 Tingtask 一样，这款软件也<strong>可以调整执行次数和执行速度</strong><img src="https://image.cubox.pro/article/2022081620421765673/39861.jpg"></p>
<p><img src="https://image.cubox.pro/article/2022081620421794916/98023.jpg"></p>
<p>但更重要的是他还支持命令行模式运行指定脚本！比如这样：KeymouseGo.exe scripts&#x2F;0314_1452.txt</p>
<p>⚠️这里需要注意的是，如果指定脚本的路径，请使用绝对路径，这样不容易出错</p>
<p>这个功能的意义在于什么呢？<strong>即 KeymouseGo 还可以搭配 Windows 计划任务来实现一些无人值守的自动化操作！</strong></p>
<p><img src="https://image.cubox.pro/article/2022081620421770656/69399.jpg"></p>
<p>按下WIN＋S搜索「任务计划程序」，或者按下WIN＋R输入「taskschd.msc」即可快速打开 Windows 自带的任务计划程序：</p>
<p><img src="https://image.cubox.pro/article/2022081620421730891/82522.jpg"></p>
<p>任务的名称和描述可以随意填写，然后就是设置计划在什么时候运行</p>
<p><img src="https://image.cubox.pro/article/2022081620421776418/56011.jpg"></p>
<p>执行的操作这里，肯定选择启动程序</p>
<p><img src="https://image.cubox.pro/article/2022081620421778375/10198.jpg"></p>
<p>最后就是添加 Keymousego 的程序目录了，然后在<strong>添加参数</strong>这里，填入你脚本的_绝对路径_，比如：D:\Program Files\scripts\0708_2204.txt</p>
<p><img src="https://image.cubox.pro/article/2022081620421748898/36395.jpg"></p>
<p>设置好之后，到了你设置好的时间，电脑就会自动运行你录制好的操作</p>
<p>如果你担心哪里没设置好，你可以直接在「任务计划程序」这里<strong>右键</strong>你的任务，直接运行测试看看<img src="https://image.cubox.pro/article/2022081320152751985/76334.jpg"></p>
<p><img src="https://image.cubox.pro/article/2022081620421766052/25539.jpg"></p>
<p>试想一下，合理使用 Keymousego 你便可以轻松实现以下场景：</p>
<blockquote>
<ul>
<li><p>每天早上到公司启动电脑，然后去冲杯咖啡，Keymousego 会自动帮你打开各种软件、登录各种网站</p>
</li>
<li><p>每天中午吃饭时间，自动帮你登录各种网站签到（当然也得网站没有人机验证才行），签到完之后还自动帮你锁定电脑</p>
</li>
</ul>
</blockquote>
<p>还比如阿虚之前的WIN+R使用教程里面，虽然已经解决了非常多的网站的一键搜索问题，但再配上 Keymousego 的话，<strong>还可以进一步解决那种没有搜索串／论坛的一键搜索问题</strong></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzA5NjEwNjE0OQ==&mid=2247508947&idx=1&sn=1507af33b224b198c985f50f71b7866e&chksm=90b7c019a7c0490fde2291df49d9e48887e737ded8c68956e896323d28e8649768ea587e1357&scene=21#wechat_redirect"><img src="https://image.cubox.pro/article/2022081620421754404/93205.jpg"></a></p>
<p>我就拿腾讯的应用宝网页版简单做个例子：<a href="https://cftweb.3g.qq.com/qqappstore/search%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E5%B0%B1%E6%98%AF%E5%8F%AA%E6%9C%89%E8%87%AA%E5%B7%B1%E6%89%93%E5%BC%80%E4%B9%8B%E5%90%8E%EF%BC%8C%E7%82%B9%E5%87%BB%E6%90%9C%E7%B4%A2%E6%A1%86%E8%BE%93%E5%85%A5%E5%85%B3%E9%94%AE%E8%AF%8D%E6%89%8D%E8%83%BD%E8%BF%9B%E8%A1%8C%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%B9%B6%E4%B8%8D%E8%83%BD%E7%9B%B4%E6%8E%A5%E9%80%9A%E8%BF%87%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E4%BC%A0%E5%85%A5%E5%85%B3%E9%94%AE%E8%AF%8D%E8%BF%9B%E8%A1%8C%E6%90%9C%E7%B4%A2">https://cftweb.3g.qq.com/qqappstore/search，这个网站就是只有自己打开之后，点击搜索框输入关键词才能进行搜索，并不能直接通过在地址栏传入关键词进行搜索</a></p>
<p><img src="https://image.cubox.pro/article/2022081620421722496/63172.jpg"></p>
<p>那我的解决思路就是：</p>
<blockquote>
<ol>
<li><p>先利用WIN+R普通的打开网址</p>
</li>
<li><p>在批处理中简单用到一条命令将运行窗口传入的关键词参数放置到剪贴板，具体命令是：echo %1| clip</p>
</li>
<li><p>最后用用 Keymousego 简单录制一个_点击输入框 » Ctrl+V粘贴 » 按下回车进行搜索_的脚本，直接执行就可以了</p>
</li>
</ol>
</blockquote>
<p>具体而言这个例子就是这样写的，也不复杂（注意空格和有没有加引号）</p>
<p><img src="https://image.cubox.pro/article/2022081620421798040/63744.jpg"></p>
<p>实际运行的效果就像这样，在WIN+R输入命令与关键词之后，会自动打开网址，并使用Keymousego 自动将鼠标移动到搜索框，再粘贴我们从WIN+R传入的参数，最后回车进行搜索<code>（当然运行过程中你不能动鼠标）</code></p>
<p><img src="https://image.cubox.pro/article/2022081620421796872/92528.jpg"></p>
<p>总之发挥你的想象，自动化可以帮你实现很多事情，也能为你节约很多时间与精力 <img src="https://image.cubox.pro/article/2022081620421743064/25657.jpg"></p>
<p><strong><em>2</em></strong></p>
<p><strong>RPA办公自动化工具</strong></p>
<p>如果简单的键盘鼠标操作录制还无法满足你的需求，你的操作涉及到一些_逻辑判断_或者_Excel表格数据_获取等…那你可能需要用到更专业的<strong>RPA自动化办公工具</strong></p>
<p>不过想利用RPA自己编写一个自动化程序，可能对于一般人而言就略显复杂了，你需要具有基本的编程思维，也要略懂什么是变量、什么是循环…</p>
<p>因为这些工具都强大、复杂到远远不能仅用一篇文章介绍清楚，阿虚这里就只简单介绍一下<code>（让大家知道有这类工具）</code>，对于有需要的粉丝，可以自行在网上详细去了解一下<img src="https://image.cubox.pro/article/2022081620421881400/82093.jpg"></p>
<p><strong><em>2.1</em></strong></p>
<p><strong><strong>UiBot Creator＋UB Store</strong></strong></p>
<p>UiBot 其实是_按键精灵_的新产品，UiBot Creator 最早的版本发布于2019年1月，到如今也算是一个挺成熟的产品了：<a href="https://www.uibot.com.cn/">https://www.uibot.com.cn/</a></p>
<p><img src="https://image.cubox.pro/article/2022081620421711501/12218.jpg"></p>
<p>相比按键精灵，UiBot Creator 又多出了很多数据处理等功能，可以更轻松的处理Excel、PDF、图片等文件，提取或者写入数据，也可以更轻松的定位到网页具体位置<img src="https://image.cubox.pro/article/2022081620421712288/63753.jpg"></p>
<p><img src="https://image.cubox.pro/article/2022081620421743868/60139.jpg"></p>
<p>至于具体这些命令怎么使用，各项操作怎么衔接，阿虚就没办法专门出文章介绍了</p>
<p>有需要可以自行上UiBot官网查看免费的教学视频，每个功能都有详细的介绍：<a href="https://academy.laiye.com/teachvideo">https://academy.laiye.com/teachvideo</a></p>
<p><img src="https://image.cubox.pro/article/2022081620421725089/49306.jpg"></p>
<p>如果你实在不会自己编写自动化程序，你也可以在官网上下载<strong>机器人商城（UB Store）</strong></p>
<p>上面有大量别人制作好的自动化机器人脚本，涵盖防疫、电商、制造业、金融、教育培训、医疗健康等等多个行业（PS：不是免费的）</p>
<p><img src="https://image.cubox.pro/article/2022081620421793600/29589.jpg"></p>
<p>如果在市场已有的机器人里面没找到你需要的机器人，你也可以花钱找人定制<img src="https://image.cubox.pro/article/2022081620421768977/74594.jpg"></p>
<p>如果一次付费能为将来节约很多时间，其实付费定制也还是可以考虑的</p>
<p><img src="https://image.cubox.pro/article/2022081620421767515/34586.jpg"></p>
<p>▲定制机器人</p>
<p><strong><em>2.2</em></strong></p>
<p><strong><strong>影刀</strong></strong></p>
<p>相比UiBot，同类型的RPA自动化工具「影刀」上线时间要略迟一点，最早正式上线于2020年2月18日：<a href="https://www.winrobot360.com/">https://www.winrobot360.com/</a></p>
<p><img src="https://image.cubox.pro/article/2022081620421738550/42015.jpg"></p>
<p>在操作的编辑上，RPA的功能都大差不差，我这里便也不多介绍了</p>
<p><img src="https://image.cubox.pro/article/2022081620421780271/75775.jpg"></p>
<p>并且在软件内部，也有免费的教程以供学习<img src="https://image.cubox.pro/article/2022081620421722737/71479.jpg"></p>
<p><img src="https://image.cubox.pro/article/2022081620421759921/20789.jpg"></p>
<p>影刀内置了脚本市场，提供的自动化脚本涉及_淘宝／京东／钉钉／拼多多／抖音／快手／微信／钉钉等各个办公场景_</p>
<p>并且最大的优势在于市场内的工具都可以<strong>免费获取使用！</strong></p>
<p><img src="https://image.cubox.pro/article/2022081620421765283/72988.jpg"></p>
<p>如果没找到你需要的自动化程序，同时又不会自己编写的话，你可以在官网点击获取自动化方案<img src="https://image.cubox.pro/article/2022081620421761474/63320.jpg"></p>
<p><img src="https://image.cubox.pro/article/2022081620421797317/12676.jpg"></p>
<p><strong><em>2.3</em></strong></p>
<p><strong><strong>Power Automate Desktop</strong></strong></p>
<p>除了以上，其实微软也在推进自动化办公的发展，在WIN11系统中直接内置了Power Automate Desktop 这款自动化软件<img src="https://image.cubox.pro/article/2022081620421784494/66411.jpg"></p>
<p>但我们也没必要升级到WIN11，Power Automate Desktop有单独的客户端可以下载，在WIN10的 Microsoft Store 就可以下载：<a href="https://www.microsoft.com/store/productId/9NFTCH6J7FHV">https://www.microsoft.com/store/productId/9NFTCH6J7FHV</a></p>
<p>或者点击用这个链接也可以下载：<a href="https://go.microsoft.com/fwlink/?linkid=2185680">https://go.microsoft.com/fwlink/?linkid=2185680</a></p>
<p><img src="https://image.cubox.pro/article/2022081620421772205/51050.jpg"></p>
<p>相较 UiBot 和影刀的优势自然是<strong>完全免费</strong>，但缺点是没有像他们那样的应用市场，虽然也有专门的社区，但里面都是外国人在讨论。没有一点RPA工具的使用经验的话，这款软件可能并没那么容易上手<img src="https://image.cubox.pro/article/2022081620421754392/74053.jpg"></p>
<p>不过如果你想深入学习 Power Automate，_B站_和_少数派_是你不错的选择，这两处都有不少免费且高质量的教程</p>
<p><img src="https://image.cubox.pro/article/2022081320152794323/43480.jpg"></p>
<p>最后还想提一点就是：_尽量利用键盘来进行操作，可以让你录制的各种操作更加丝滑且精准_：</p>
<p>比如90%的标签都可以用Ctrl Tab及Ctrl Shtif Tab上下切换（或者Ctrl + PgUp／PgDn）</p>
<p><img src="https://image.cubox.pro/article/2022081620421775861/97778.jpg"></p>
<p>又比如在各种窗口下，按下Alt键，就可以通过键盘来操作</p>
<p><img src="https://image.cubox.pro/article/2022081620421732479/40442.jpg"></p>
<p>还有诸如_Alt＋PrtSc_截取当前活动窗口、_Win＋Pause_打开系统属性、_F4／Alt＋D／Ctrl＋L_可以快速切换到地址栏等等，阿虚这里就不介绍了——Windows键盘操作、快捷键实在是太多了，你可以自行百度，网上轻松就能找到很多总结性文章<img src="https://image.cubox.pro/article/2022081620421724514/23060.jpg"></p>
<p>今天的文章写的很简单，但这也是没办法的事——<strong>想突出自动化工具的强大，就不得不将其置于一个个具体的应用场景中</strong></p>
<p>阿虚在这先把工具给介绍了，以后争取再分享一些「利用以上工具」来实现自动化的案例吧！</p>
<p><img src="https://image.cubox.pro/article/2022081320152714004/27518.jpg"></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzA5NjEwNjE0OQ==&mid=2247511293&idx=1&sn=7fd446fb2ead8f17bd60c40dca421b63&chksm=90b7cf37a7c046217e3009c2b784b89308282139dc3bd331532f4d7a7ce53a5561b918dc09ec&mpshare=1&scene=1&srcid=08160Ak0fgOx58iYjydF9pso&sharer_sharetime=1662801889409&sharer_shareid=f9049818211070a874d51073efa3d8bf#rd">查看原网页: mp.weixin.qq.com</a></p>
]]></content>
      <categories>
        <category>学习类</category>
        <category>工具类</category>
        <category>自动化</category>
      </categories>
      <tags>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>使用枚举来巧妙干掉if-else，使代码更加优雅</title>
    <url>/2022/09/09/%E5%AD%A6%E4%B9%A0%E7%B1%BB/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/Java/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/%E4%BD%BF%E7%94%A8%E6%9E%9A%E4%B8%BE%E6%9D%A5%E5%B7%A7%E5%A6%99%E5%B9%B2%E6%8E%89if-else%EF%BC%8C%E4%BD%BF%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%8A%A0%E4%BC%98%E9%9B%85/</url>
    <content><![CDATA[<p><strong>导读：</strong>本文通过一个简单的例子来展示如何通过枚举巧妙地干掉if-else，使代码看起来更佳优雅。</p>
<p><strong>场景：</strong> 当我们接收到一些数据需要对其进行处理时，由于它们来自于不同的渠道（如：腾讯，头条），不同渠道所需的处理方式不同，下面我们写一个简单Demo来实现该的场景。</p>
<span id="more"></span>
<p><img src="https://p3-sign.toutiaoimg.com/dfic-imagehandler/a505ff21-85dc-420d-a512-6d501cf656ac~noop.image?_iz=58558&from=article.pc_detail&x-expires=1663332603&x-signature=WnH8DbFJPM2NTftVuODu9PypsIE="></p>
<h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>1、首先构建一个 GeneralChannelRule 基础规则抽象类，定义一个抽象方法process()，不同的渠道都需要实现该抽象方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public abstract class GeneralChannelRule &#123;</span><br><span class="line"> public abstract void process();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、编写一个腾讯的规则类，定义具体对于腾讯渠道数据的处理逻辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TencentChannelRule extends GeneralChannelRule</span><br><span class="line"> 		@Override</span><br><span class="line">    public void process() &#123;</span><br><span class="line">        // Tencent处理逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、编写一个头条的规则类，定义具体对于头条数据的处理逻辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TouTiaoChannelRule extends GeneralChannelRule</span><br><span class="line"> 		@Override</span><br><span class="line">    public void process() &#123;</span><br><span class="line">        // TouTiao处理逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、建立一个简单的枚举类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public enum ChannelRuleEnum &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 头条</span><br><span class="line">     */</span><br><span class="line">    TOUTIAO(&quot;TOUTIAO&quot;),</span><br><span class="line">    /**</span><br><span class="line">     * 腾讯</span><br><span class="line">     */</span><br><span class="line">    TENCENT(&quot;TENCENT&quot;),</span><br><span class="line">    ;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、使用规则对数据进行处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //这里我们模拟接收到的数据，其渠道为为TOUTIAO，来自头条的数据</span><br><span class="line">        String sign = &quot;TOUTIAO&quot;;</span><br><span class="line">        GeneralChannelRule rule;</span><br><span class="line">        //根据对应渠道获取对应的具体规则实现类</span><br><span class="line">        if (ChannelRuleEnum.TENCENT.code.equals(sign)) &#123;</span><br><span class="line">            rule = new TencentChannelRule();</span><br><span class="line">        &#125; else if (ChannelRuleEnum.TOUTIAO.code.equals(sign)) &#123;</span><br><span class="line">            rule = new TouTiaoChannelRule();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //匹配不到</span><br><span class="line">        &#125;</span><br><span class="line">  			//执行</span><br><span class="line">        rule.process();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>解析</strong>：如果通过上面的方式，则存在则两个缺点。</p>
<ul>
<li>当我们需要新增新的渠道的时候，需要对main方法中的逻辑进行修改调整。这违背了设计模式中的开放封闭规则。</li>
</ul>
<blockquote>
<p>开放封闭原bai则的核心的思想是软件实体是可扩du展，而不可zhi修改的。也就是说，对扩展是开dao放的，而对修改是封闭的</p>
</blockquote>
<ul>
<li>新增渠道后，修改代码会产生大量的if else，不太优雅。</li>
</ul>
<p>为了解决以上的两个问题，我们可以<strong>借助枚举类来巧妙优化</strong>。</p>
<p><img src="https://p3-sign.toutiaoimg.com/dfic-imagehandler/afed0620-5bb9-4320-a663-cb87f868303f~noop.image?_iz=58558&from=article.pc_detail&x-expires=1663332603&x-signature=HoICSU9qcH+Ex2bny3B2HWvbMEg="></p>
<h1 id="新的思路"><a href="#新的思路" class="headerlink" title="新的思路"></a>新的思路</h1><p>1、下面我们调整一下枚举类，增加一个GeneralChannelRule属性，并且给对应渠道构建对应的GeneralChannelRule实现类，新增一个match() 匹配方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public enum ChannelRuleEnum &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 头条</span><br><span class="line">     */</span><br><span class="line">    TOUTIAO(&quot;TOUTIAO&quot;,new TouTiaoChannelRule()),</span><br><span class="line">    /**</span><br><span class="line">     * 腾讯</span><br><span class="line">     */</span><br><span class="line">    TENCENT(&quot;TENCENT&quot;,new TencentChannelRule()),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    public String name;</span><br><span class="line"></span><br><span class="line">    public GeneralChannelRule channel;</span><br><span class="line"></span><br><span class="line">    ChannelRuleEnum(String name, GeneralChannelRule channel) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.channel = channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  //匹配</span><br><span class="line">    public static ChannelRuleEnum match(String name)&#123;</span><br><span class="line">        ChannelRuleEnum[] values = ChannelRuleEnum.values();</span><br><span class="line">        for (ChannelRuleEnum value : values) &#123;</span><br><span class="line">            if(value.name.equals(name))&#123;</span><br><span class="line">                return value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public GeneralChannelRule getChannel() &#123;</span><br><span class="line">        return channel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、改写程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        String sign = &quot;TOUTIAO&quot;;</span><br><span class="line">        ChannelRuleEnum channelRule = ChannelRuleEnum.match(sign);</span><br><span class="line">        GeneralChannelRule rule = channelRule.channel;</span><br><span class="line">        rule.process(sign);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong>通过使用枚举类，在枚举中将 key 与 规则具体实现进行绑定。通过改变：</p>
<ul>
<li>可以减少if -else使得代码更加优雅</li>
<li>如果需要新增渠道，我们只需要在编写具体规则实现类并继承GeneralChannelRule抽象类，并在枚举类中新增的枚举，而不需要改动到原先的任何代码。这符合了开发封闭原则。</li>
</ul>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>以上是通过枚举来巧妙干掉if-else的方案，对于减少 if-else 还有很多有趣的解决方案（如：状态设计模式等），感兴趣的朋友去查阅相关的资料。</p>
<p>转载自： <a href="https://www.toutiao.com/i6847406631983153672">https://www.toutiao.com/i6847406631983153672</a></p>
]]></content>
      <categories>
        <category>学习类</category>
        <category>后端技术</category>
        <category>Java</category>
        <category>代码优化</category>
      </categories>
      <tags>
        <tag>代码优化</tag>
        <tag>减少ifelse</tag>
      </tags>
  </entry>
  <entry>
    <title>横空出世！IDEA画图神器来了</title>
    <url>/2022/09/10/%E5%AD%A6%E4%B9%A0%E7%B1%BB/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E7%94%BB%E5%9B%BE/%E6%A8%AA%E7%A9%BA%E5%87%BA%E4%B8%96%EF%BC%81IDEA%E7%94%BB%E5%9B%BE%E7%A5%9E%E5%99%A8%E6%9D%A5%E4%BA%86/</url>
    <content><![CDATA[<h1 id="横空出世！IDEA画图神器来了，比Visio快10倍！"><a href="#横空出世！IDEA画图神器来了，比Visio快10倍！" class="headerlink" title="横空出世！IDEA画图神器来了，比Visio快10倍！"></a>横空出世！IDEA画图神器来了，比Visio快10倍！</h1><p>程序员在工作中，经常会有绘制时序图、流程图的需求，尤其是在写文档的时候。平时我们会选择ProcessOn这类工具来绘制，但有时候用代码来画图可能会更高效一点，毕竟没有比程序员更熟悉代码的了。今天给大家推荐一款画图工具PlantUML，可以配合IDEA使用，画图更高效！</p>
<h2 id="PlantUML简介"><a href="#PlantUML简介" class="headerlink" title="PlantUML简介"></a>PlantUML简介</h2><p>PlantUML是一款开源的UML图绘制工具，支持通过文本来生成图形，使用起来非常高效。可以支持时序图、类图、对象图、活动图、思维导图等图形的绘制。</p>
<p>下面使用PlantUML来绘制一张流程图，可以实时预览，速度也很快！</p>
<p><img src="https://image.cubox.pro/article/2022090909415424745/69659.jpg"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>通过在IDEA中安装插件来使用PlantUML无疑是最方便的，接下来我们来安装下IDEA的PlantUML插件。</p>
</blockquote>
<ul>
<li>首先在IDEA的插件市场中搜索<code>PlantUML</code>，安装这个排名第一的插件；</li>
</ul>
<p><img src="https://image.cubox.pro/article/2022090909415490688/29577.jpg"></p>
<ul>
<li>有时候网络不好的话可能下载不下来，可以点击<code>Plguin homepage</code>按钮访问插件主页，然后选择合适的版本下载压缩包；</li>
</ul>
<p><img src="https://image.cubox.pro/article/2022090909415594943/86812.jpg"></p>
<ul>
<li>下载成功后，选择从本地安装即可。</li>
</ul>
<p><img src="https://image.cubox.pro/article/2022090909415582745/16528.jpg"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>接下来我们使用PlantUML插件分别绘制时序图、用例图、类图、活动图、思维导图，来体验下PlantUML是不是真的好用！</p>
</blockquote>
<h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><blockquote>
<p>时序图（Sequence Diagram），是一种UML交互图。它通过描述对象之间发送消息的时间顺序显示多个对象之间的动态协作。我们在学习Oauth2的时候，第一步就是要搞懂Oauth2的流程，这时候有个时序图帮助可就大了。下面我们使用PlantUML来绘制Oauth2中使用授权码模式颁发令牌的时序图。</p>
</blockquote>
<ul>
<li>首先我们需要新建一个PlantUML文件，选择时序图；</li>
</ul>
<p><img src="https://image.cubox.pro/article/2022090909415569144/70599.jpg"></p>
<ul>
<li>我们可以通过PlantUML提供的语法来生成Oauth2的时序图，语法还是非常简单的，具体内容如下；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">title Oauth2令牌颁发之授权码模式</span><br><span class="line"></span><br><span class="line">actor User as user</span><br><span class="line">participant &quot;User Agent&quot; as userAgent</span><br><span class="line">participant &quot;Client&quot; as client</span><br><span class="line">participant &quot;Auth Login&quot; as login</span><br><span class="line">participant &quot;Auth Server&quot; as server</span><br><span class="line"></span><br><span class="line">autonumber</span><br><span class="line">user-&gt;userAgent:访问客户端</span><br><span class="line">activate userAgent</span><br><span class="line">userAgent-&gt;login:重定向到授权页面+clientId+redirectUrl</span><br><span class="line">activate login</span><br><span class="line">login-&gt;server:用户名+密码+clientId+redirectUrl</span><br><span class="line">activate server</span><br><span class="line">server--&gt;login:返回授权码</span><br><span class="line">login--&gt;userAgent:重定向到redirectUrl+授权码code</span><br><span class="line">deactivate login</span><br><span class="line">userAgent-&gt;client:使用授权码code换取令牌</span><br><span class="line">activate client</span><br><span class="line">client-&gt;server:授权码code+clientId+clientSecret</span><br><span class="line">server--&gt;client:颁发访问令牌accessToken+refreshToken</span><br><span class="line">deactivate server</span><br><span class="line">client--&gt;userAgent:返回访问和刷新令牌</span><br><span class="line">deactivate client</span><br><span class="line">userAgent--&gt; user:令牌颁发完成</span><br><span class="line">deactivate userAgent</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<ul>
<li>该代码将生成如下时序图，用写代码的方式来画时序图，是不是够炫酷；</li>
</ul>
<p><img src="https://image.cubox.pro/article/2022090909415522170/73318.jpg"></p>
<ul>
<li><p>本时序图关键说明如下：</p>
</li>
<li><p><code>title</code>可以用于指定UML图的标题；</p>
</li>
<li><p>通过<code>actor</code>可以声明人形的参与者；</p>
</li>
<li><p>通过<code>participant</code>可以声明普通类型的参与者；</p>
</li>
<li><p>通过<code>as</code>可以给参与者取别名；</p>
</li>
<li><p>通过<code>-&gt;</code>可以绘制参与者之间的关系，虚线箭头可以使用<code>--&gt;</code>；</p>
</li>
<li><p>在每个参与者关系后面，可以使用<code>:</code>给关系添加说明；</p>
</li>
<li><p>通过<code>autonumber</code>我们可以给参与者关系自动添加序号；</p>
</li>
<li><p>通过<code>activate</code>和<code>deactivate</code>可以指定参与者的生命线。</p>
</li>
<li><p>这里还有个比较神奇的功能，当我们右键时序图时，可以生成一个在线访问的链接；</p>
</li>
</ul>
<p><img src="https://image.cubox.pro/article/2022090909415531525/60580.jpg"></p>
<ul>
<li>直接访问这个链接，可以在线访问UML时序图，并进行编辑，是不是很酷！</li>
</ul>
<p><img src="https://image.cubox.pro/article/2022090909415559206/16212.jpg"></p>
<h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h3><blockquote>
<p>用例图（Usecase Diagram）是用户与系统交互的最简表示形式，展现了用户和与他相关的用例之间的关系。通过用例图，我们可以很方便地表示出系统中各个角色与用例之间的关系，下面我们用PlantUML来画个用例图。</p>
</blockquote>
<ul>
<li><p>首先我们需要新建一个PlantUML文件，选择用例图，该用例图用于表示顾客、主厨、美食家与餐馆中各个用例之间的关系，具体内容如下；</p>
<p>@startumlleft to right directionactor Guest as gpackage Professional {    actor Chief as c    actor “Food Critic” as fc}package Restaurant {    usecase “Eat Food” as uc1    usecase “Pay For Food” as uc2    usecase “Drink” as uc3    usecase “Review” as uc4}g–&gt; uc1g–&gt; uc2g–&gt; uc3fc–&gt; uc4@enduml</p>
</li>
<li><p>该代码将生成如下用例图；</p>
</li>
</ul>
<p><img src="https://image.cubox.pro/article/2022090909415556738/60102.jpg"></p>
<ul>
<li><p>本用例图关键说明如下：</p>
</li>
<li><p><code>left to right direction</code>表示按从左到右的顺序绘制用例图，默认是从上到下；</p>
</li>
<li><p>通过<code>package</code>可以对角色和用例进行分组；</p>
</li>
<li><p>通过<code>actor</code>可以定义用户；</p>
</li>
<li><p>通过<code>usecase</code>可以定义用例；</p>
</li>
<li><p>角色和用例之间的关系可以使用<code>--&gt;</code>来表示。</p>
</li>
</ul>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><blockquote>
<p>类图（Class Diagram）可以表示类的静态结构，比如类中包含的属性和方法，还有类的继承结构。下面我们用PlantUML来画个类图。</p>
</blockquote>
<ul>
<li>首先我们需要新建一个PlantUML文件，选择类图，该图用于表示Person、Student、Teacher类的结构，具体内容如下；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">left to right direction</span><br><span class="line">actor Guest as g</span><br><span class="line">package Professional &#123;</span><br><span class="line">    actor Chief as c</span><br><span class="line">    actor &quot;Food Critic&quot; as fc</span><br><span class="line">&#125;</span><br><span class="line">package Restaurant &#123;</span><br><span class="line">    usecase &quot;Eat Food&quot; as uc1</span><br><span class="line">    usecase &quot;Pay For Food&quot; as uc2</span><br><span class="line">    usecase &quot;Drink&quot; as uc3</span><br><span class="line">    usecase &quot;Review&quot; as uc4</span><br><span class="line">&#125;</span><br><span class="line">g--&gt; uc1</span><br><span class="line">g--&gt; uc2</span><br><span class="line">g--&gt; uc3</span><br><span class="line">fc--&gt; uc4</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<ul>
<li>该代码将生成如下类图，看下代码和类图，是不是发现和我们用代码定义类还挺像的；</li>
</ul>
<p><img src="https://image.cubox.pro/article/2022090909415577490/91223.jpg"></p>
<ul>
<li><p>本类图关键说明如下：</p>
</li>
<li><p>通过<code>class</code>可以定义类；</p>
</li>
<li><p>通过在属性和方法左边加符号可以定义可见性，<code>-</code>表示<code>private</code>，<code>#</code>表示<code>protected</code>，<code>+</code>表示<code>public</code>；</p>
</li>
<li><p>通过<code>&lt;|--</code>表示类之间的继承关系。</p>
</li>
</ul>
<h3 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h3><blockquote>
<p>活动图（Activity Diagram）是我们用的比较多的UML图，经常用于表示业务流程，比如电商中的下单流程就可以用它来表示。下面我们用PlantUML来画个活动图。</p>
</blockquote>
<ul>
<li>首先我们需要新建一个PlantUML文件，选择活动图，这里使用了mall项目中购物车中生成确认单的流程，具体内容如下；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">class Person &#123;</span><br><span class="line">    # String name</span><br><span class="line">    # Integer age</span><br><span class="line">    + void move()</span><br><span class="line">    + void say()</span><br><span class="line">&#125;</span><br><span class="line">class Student &#123;</span><br><span class="line">    - String studentNo</span><br><span class="line">    + void study()</span><br><span class="line">&#125;</span><br><span class="line">class Teacher &#123;</span><br><span class="line">    - String teacherNo</span><br><span class="line">    + void teach()</span><br><span class="line">&#125;</span><br><span class="line">Person &lt;|-- Student</span><br><span class="line">Person &lt;|-- Teacher</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<ul>
<li>该代码将生成如下活动图，在活动图中我们既可以用<code>if else</code>，又可以使用<code>switch</code>，甚至还可以使用<code>while循环</code>，功能还是挺强大的；</li>
</ul>
<p><img src="https://image.cubox.pro/article/2022090909415565041/14598.jpg"></p>
<ul>
<li><p>本活动图关键说明如下：</p>
</li>
<li><p>通过<code>start</code>和<code>stop</code>可以表示流程的开始和结束；</p>
</li>
<li><p>通过<code>:</code>和<code>;</code>中间添加文字来定义活动流程节点；</p>
</li>
<li><p>通过<code>if</code>+<code>then</code>+<code>endif</code>定义条件判断；</p>
</li>
<li><p>通过<code>switch</code>+<code>case</code>+<code>endswitch</code>定义switch判断。</p>
</li>
</ul>
<h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><blockquote>
<p>思维导图（Mind Map），是表达发散性思维的有效图形工具，它简单却又很有效，是一种实用性的思维工具。之前在我的mall学习教程中就有很多地方用到了，下面我们用PlantUML来画个思维导图。</p>
</blockquote>
<ul>
<li>首先我们需要新建一个PlantUML文件，选择思维导图，这里使用了mall学习路线中的大纲视图，具体内容如下；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">title 生成确认单流程</span><br><span class="line">start</span><br><span class="line">:获取购物车信息并计算好优惠;</span><br><span class="line">:从ums_member_receive_address表中\n获取会员收货地址列表;</span><br><span class="line">:获取该会员所有优惠券信息;</span><br><span class="line">switch(根据use_type判断每个优惠券是否可用)</span><br><span class="line">case(0)</span><br><span class="line">    :全场通用;</span><br><span class="line">    if (判断所有商品总金额是否\n满足使用起点金额) then (否)</span><br><span class="line">        :得到用户不可用优惠券列表;</span><br><span class="line">        stop</span><br><span class="line">    endif</span><br><span class="line">case(-1)</span><br><span class="line">    :指定分类;</span><br><span class="line">    if (判断指定分类商品总金额\n是否满足使用起点金额) then (否)</span><br><span class="line">        :得到用户不可用优惠券列表;</span><br><span class="line">        stop</span><br><span class="line">    endif</span><br><span class="line">case(-2)</span><br><span class="line">    :判断指定商品总金额是否满足使用起点金额;</span><br><span class="line">    if (判断指定分类商品总金额\n是否满足使用起点金额) then (否)</span><br><span class="line">        :得到用户不可用优惠券列表;</span><br><span class="line">        stop</span><br><span class="line">    endif</span><br><span class="line">endswitch</span><br><span class="line">:得到用户可用优惠券列表;</span><br><span class="line">:获取用户积分;</span><br><span class="line">:获取积分使用规则;</span><br><span class="line">:计算总金额，活动优惠，应付金额;</span><br><span class="line">stop</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<ul>
<li>该代码将生成如下思维导图，其实使用PlantUML我们可以自己定义图形的样式，这里我自定义了下颜色；</li>
</ul>
<p><img src="https://image.cubox.pro/article/2022090909415514366/28229.jpg"></p>
<ul>
<li><p>本思维导图关键说明如下：</p>
</li>
<li><p>通过<code>+</code>和<code>-</code>可以表示思维导图中的节点，具有方向性；</p>
</li>
<li><p>通过<code>[#颜色]</code>可以定义节点的边框颜色；</p>
</li>
<li><p>通过<code>_</code>可以去除节点的边框；</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然目前可以绘制UML图的图形化工具很多，但是对于程序员来说，使用代码来绘图可能更直接，效率更高，尤其是配合IDEA使用。如果你想使用代码来绘图，不妨尝试下PlantUML吧。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>官方文档：<a href="https://plantuml.com/zh/">https://plantuml.com/zh/</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5NTY1MjY0MQ==&mid=2650862341&idx=4&sn=815485b30faa70e67fc823be10d93571&chksm=bd01664b8a76ef5d00026f184234f4b579f8b7bbd7955031405788a0ba0f797d50dab0302750&mpshare=1&scene=1&srcid=0823GpOLiSIskjbVRlgr4CZ2&sharer_sharetime=1662801754250&sharer_shareid=f9049818211070a874d51073efa3d8bf#rd">查看原网页: mp.weixin.qq.com</a></p>
]]></content>
      <categories>
        <category>学习类</category>
        <category>工具类</category>
        <category>画图</category>
      </categories>
  </entry>
</search>
